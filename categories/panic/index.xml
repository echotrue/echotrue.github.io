<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>panic on Axlrose&#39;s blog</title>
    <link>http://echotrue.github.io/categories/panic/</link>
    <description>Recent content in panic on Axlrose&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Axlrose</copyright>
    <lastBuildDate>Fri, 09 Aug 2019 15:55:02 +0800</lastBuildDate>
    
	<atom:link href="http://echotrue.github.io/categories/panic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Panic and Recover</title>
      <link>http://echotrue.github.io/golang/panic-and-recover/</link>
      <pubDate>Fri, 09 Aug 2019 15:55:02 +0800</pubDate>
      
      <guid>http://echotrue.github.io/golang/panic-and-recover/</guid>
      <description>panic  Golang 中常见的错误处理方式是返回error给调用者。通常error使用场景是发生了逻辑错误。但是，如果是无法恢复的错误，可以选择使用panic。panic可以主动触发。也可以被动触发（例如：数组越界）。
 panic会停掉当前正在执行的程序，与os.Exit(-1)不同的是：panic会有序的撤退，它会先处理完当前goroutine已经defer的任务，然后再退出整个程序。
func main() { var user = os.Getenv(&amp;quot;USER_&amp;quot;) go func() { defer func() { fmt.Println(&amp;quot;defer 1&amp;quot;) }() if user == &amp;quot;&amp;quot;{ panic(&amp;quot;should set user env.&amp;quot;) } }() time.Sleep(1*time.Second) fmt.Println(&amp;quot;get result&amp;quot;) }  上述代码输出：
defer 1 panic: should set user env. goroutine 19 [running]: main.main.func1(0x0, 0x0) D:/gopath/src/race_condition/index.go:16 +0x86 created by main.main D:/gopath/src/race_condition/index.go:11 +0x59 Process finished with exit code 2 说明panic坚守了自己的原则：执行且只执行当前goroutine的defer，defer的特点是LIFO，即后进先出。如果有多个defer的时候，会倒序执行
recover  有时候不希望因为panic导致整个进程终止，因此需要像其他语言捕获异常。在Golang中可以通过在当前goroutine的defer中使用recover来捕获panic。recover只在defer的函数中有效，如果不是在defer上下文中调用，recover会直接返回nil</description>
    </item>
    
  </channel>
</rss>