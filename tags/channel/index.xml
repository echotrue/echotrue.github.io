<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Channel on AXLROSE</title><link>https://echotrue.github.io/tags/channel/</link><description>Recent content in Channel on AXLROSE</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>axlrose.huang@gmail.com (Axlrose)</managingEditor><webMaster>axlrose.huang@gmail.com (Axlrose)</webMaster><copyright>2023 Axlrose rights reserved</copyright><lastBuildDate>Tue, 08 Sep 2020 14:51:55 +0800</lastBuildDate><atom:link href="https://echotrue.github.io/tags/channel/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang channel</title><link>https://echotrue.github.io/blog/golang/channel/</link><pubDate>Tue, 08 Sep 2020 14:51:55 +0800</pubDate><author>axlrose.huang@gmail.com (Axlrose)</author><guid>https://echotrue.github.io/blog/golang/channel/</guid><description>&lt;h3 id="概念">概念&lt;/h3>
&lt;p>  从字面上看，&lt;code>channel&lt;/code>的意思大概就是管道的意思。&lt;code>channel&lt;/code>是一种&lt;code>goroutine&lt;/code>用以接收或发送消息的安全的消息队列，&lt;code>channel&lt;/code>就像两个&lt;code>goroutine&lt;/code>之间的导管，来实现各种资源的同步。在官方&lt;code>Effective go&lt;/code>文档中有一句非常著名的话可以说明&lt;code>channel&lt;/code>在使用&lt;code>Golang&lt;/code>进行并发编程的时候扮演了极为重要的角色&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Do not communicate by sharing memory; instead, share memory by communicating.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;h3 id="channel类型">Channel类型&lt;/h3>
&lt;pre tabindex="0">&lt;code>readOnlyCh := make(&amp;lt;-chan int)//表示一个元素类型为T的单向接收通道类型。 编译器不允许向此类型的值中发送数据。
writeOnlyCh := make(chan&amp;lt;- int)//表示一个元素类型为T的单向发送通道类型。 编译器不允许从此类型的值中接收数据
readWriteCh := make(chan int)//表示一个元素类型为T的双向通道类型。 编译器允许从此类型的值中接收和向此类型的值中发送数据
&lt;/code>&lt;/pre>&lt;h3 id="阻塞">阻塞&lt;/h3>
&lt;p>  根据&lt;code>Channel&lt;/code>缓冲区的大小，我们又可以将&lt;code>Channel&lt;/code>分为&lt;code>Unbuffered channels&lt;/code>与&lt;code>Buffered channels&lt;/code>。其中，&lt;code>Unbuffered channels&lt;/code>的缓冲区大小为0，这种&lt;code>channel&lt;/code>的接收者会阻塞直至接收到消息，发送者会阻塞直至接收者接收到消息，这种机制可以用于两个&lt;code>goroutine&lt;/code>进行状态同步。&lt;code>Buffered channels&lt;/code>拥有缓冲区，当缓冲区已满时，发送者会阻塞；当缓冲区为空时，接收者会阻塞。引用&lt;a href="https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html">The Nature Of Channels In Go&lt;/a>中的两张图片来说明两种&lt;code>channel&lt;/code>的特性。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Unbuffered Channels&lt;/code>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;code>Buffered Channels&lt;/code>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;h3 id="a-idcode1基本用法a">&lt;!-- raw HTML omitted -->基本用法&lt;!-- raw HTML omitted -->&lt;/h3>
&lt;pre tabindex="0">&lt;code>ch := make(chan string)
go func() {
ch &amp;lt;- &amp;#34;hello&amp;#34;
}()
msg := &amp;lt;-ch
fmt.Println(msg)
&lt;/code>&lt;/pre>&lt;p>  以上代码，利用不带缓冲的&lt;code>channel&lt;/code>双向阻塞的特性。主&lt;code>goroutine&lt;/code>(就是main函数)会阻塞直到接收到子&lt;code>goroutine&lt;/code>向&lt;code>ch&lt;/code>中写入的值。所以保证了&lt;code>hello&lt;/code>一定会输出。&lt;/p>
&lt;h3 id="利用channel实现并发的同步">利用&lt;code>Channel&lt;/code>实现并发的同步&lt;/h3>
&lt;p>  &lt;a href="#code1">基本用法&lt;/a>中的代码片段使用阻塞接收的方式，实现了主&lt;code>goroutine&lt;/code>等待子&lt;code>goroutine&lt;/code>完成。最终达到了两个&lt;code>goroutine&lt;/code>的同步。使用&lt;code>WaitGroup&lt;/code>同样能达到多个&lt;code>goroutine&lt;/code>的同步，尤其是需要等待多个协程的情况下，&lt;code>WaitGroup&lt;/code>会是更好的选择。&lt;/p>
&lt;pre tabindex="0">&lt;code>func worker(i int, wg *sync.WaitGroup) {
defer wg.Done()
time.Sleep(time.Second)
fmt.Printf(&amp;#34;worker %d stared\n&amp;#34;, i)
}
func main() {
var wg sync.WaitGroup
for i := 1; i &amp;lt;= 5; i++ {
wg.Add(1)
go worker(i, &amp;amp;wg)
}
wg.Wait()
}
&lt;/code>&lt;/pre>&lt;p>执行结果：&lt;/p>
&lt;pre tabindex="0">&lt;code>worker 1 stared
worker 5 stared
worker 4 stared
worker 3 stared
worker 2 stared
&lt;/code>&lt;/pre>&lt;h3 id="channel-选择器">Channel 选择器&lt;/h3>
&lt;p>  &lt;code>select&lt;/code>语句主要用在从多个读或者写&lt;code>channel&lt;/code>的操作中进行选择。&lt;code>select&lt;/code>语句会一直阻塞直到，有至少一个读或者写&lt;code>channel&lt;/code>操作就绪。如果同时有多个操作准备就绪，&lt;code>select&lt;/code>语句会随机选择其中一个执行。&lt;code>select&lt;/code>语法类似&lt;code>switch&lt;/code>，每个&lt;code>case&lt;/code>相当于一个通道操作。&lt;/p>
&lt;pre tabindex="0">&lt;code>c1 := make(chan string)
c2 := make(chan string)
go func() {
time.Sleep(1 * time.Second)
c1 &amp;lt;- &amp;#34;one&amp;#34;
}()
go func() {
time.Sleep(1 * time.Second)
c2 &amp;lt;- &amp;#34;two&amp;#34;
}()
for i := 0; i &amp;lt; 2; i++ {
select {
case msg1 := &amp;lt;-c1:
fmt.Printf(&amp;#34;接到消息：%s\n&amp;#34;, msg1)
case msg2 := &amp;lt;-c2:
fmt.Printf(&amp;#34;接到消息：%s\n&amp;#34;, msg2)
}
}
&lt;/code>&lt;/pre>&lt;p>以上代码会输出：接到消息one，接到消息two。&lt;/p>
&lt;h3 id="channel遍历">Channel遍历&lt;/h3>
&lt;p>&lt;code>for...range&lt;/code>可以用来遍历通道，它会反复从通道接收数据直到通道关闭。&lt;/p>
&lt;pre tabindex="0">&lt;code>queue := make(chan string, 2)
queue &amp;lt;- &amp;#34;one&amp;#34;
queue &amp;lt;- &amp;#34;two&amp;#34;
close(queue)
for elem := range queue {
fmt.Println(elem)
}
&lt;/code>&lt;/pre>&lt;h3 id="channel-的关闭">Channel 的关闭&lt;/h3>
&lt;p>  内置函数&lt;code>close()&lt;/code>可以用来关闭&lt;code>channel&lt;/code>,&lt;code>close()&lt;/code>函数只能关闭可读写或者只写的通道。通道的关闭通常应该遵循一定的原则：由生产者（发送者）来关闭，保证不关闭已关闭的通道(或向已关闭的通道发送值)。&lt;/p>
&lt;pre tabindex="0">&lt;code>ch := make(chan string) //可以关闭的通道
ch := make(chan&amp;lt;- string) //可以关闭的通道
ch := make(&amp;lt;-chan string) //不能关闭的通道
&lt;/code>&lt;/pre>&lt;p>1、关闭 一个通道意味着不能再向这个通道发送值了。 该特性可以向通道的接收方传达工作已经完成的信息。&lt;/p>
&lt;pre tabindex="0">&lt;code>msg := make(chan string)
done := make(chan bool)
go func() {
for {
select {
case m, ok := &amp;lt;-msg:
if ok {
fmt.Printf(m)
} else {
fmt.Println(&amp;#34;All message has received.&amp;#34;)
done &amp;lt;- true
return
}
}
}
}()
for i := 1; i &amp;lt; 4; i++ {
msg &amp;lt;- fmt.Sprintf(&amp;#34;Message %d\n&amp;#34;, i)
}
close(msg)
&amp;lt;-done
&lt;/code>&lt;/pre>&lt;p>2、向一个已经关闭的&lt;code>channel&lt;/code>发送数据会&lt;code>panic&lt;/code>&lt;/p>
&lt;p>3、从一个已经关闭的通道中读数据，依然可以读到数据。读到的内容是通道元素类型所对应的的零值。（例如：int类型channel读到的是0）。&lt;/p>
&lt;pre tabindex="0">&lt;code>ch := make(chan int)
dataCh := make(chan string)
go func() {
dataCh &amp;lt;- &amp;#34;str one&amp;#34;
dataCh &amp;lt;- &amp;#34;str two&amp;#34;
close(dataCh)
}()
go func() {
for {
time.Sleep(time.Millisecond * 500)
select {
case str := &amp;lt;-dataCh:
fmt.Println(&amp;#34;--&amp;gt;&amp;#34;,str)
}
}
}()
&amp;lt;-ch
//输出：
--&amp;gt; str one
--&amp;gt; str two
--&amp;gt;
--&amp;gt;
&lt;/code>&lt;/pre>&lt;p>4、当发送者关闭通道后，通道接收器可以通过向接收表达式分配第二个参数来判断通道是否关闭。&lt;code>c,ok := &amp;lt;-ch&lt;/code>，如果没有更多的值要接受且通道已经关闭，&lt;code>ok&lt;/code>为&lt;code>false&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>ch := make(chan int)
dataCh := make(chan string)
go func() {
dataCh &amp;lt;- &amp;#34;str one&amp;#34;
dataCh &amp;lt;- &amp;#34;str two&amp;#34;
close(dataCh)
}()
go func() {
for {
time.Sleep(time.Millisecond * 500)
select {
case str, ok := &amp;lt;-dataCh:
if ok {
fmt.Println(&amp;#34;--&amp;gt;&amp;#34;, str)
} else {
fmt.Println(&amp;#34;通道已关闭&amp;#34;)
ch &amp;lt;- 1
return
}
}
}
}()
&amp;lt;-ch
&lt;/code>&lt;/pre>&lt;h3 id="channel的基本操作和注意事项">channel的基本操作和注意事项&lt;/h3>
&lt;p>channel存在&lt;code>3种状态&lt;/code>：&lt;/p>
&lt;ol>
&lt;li>nil，未初始化的状态，只进行了声明，或者手动赋值为&lt;code>nil&lt;/code>&lt;/li>
&lt;li>active，正常的channel，可读或者可写&lt;/li>
&lt;li>closed，已关闭，&lt;strong>千万不要误认为关闭channel后，channel的值是nil&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>channel可进行&lt;code>3种操作&lt;/code>：&lt;/p>
&lt;ol>
&lt;li>读&lt;/li>
&lt;li>写&lt;/li>
&lt;li>关闭&lt;/li>
&lt;/ol>
&lt;p>把这3种操作和3种channel状态可以组合出&lt;code>9种情况&lt;/code>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">操作&lt;/th>
&lt;th style="text-align:left">nil的channel&lt;/th>
&lt;th style="text-align:left">正常channel&lt;/th>
&lt;th style="text-align:left">已关闭channel&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&amp;lt;- ch&lt;/td>
&lt;td style="text-align:left">阻塞&lt;/td>
&lt;td style="text-align:left">成功或阻塞&lt;/td>
&lt;td style="text-align:left">读到零值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">ch &amp;lt;-&lt;/td>
&lt;td style="text-align:left">阻塞&lt;/td>
&lt;td style="text-align:left">成功或阻塞&lt;/td>
&lt;td style="text-align:left">panic&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">close(ch)&lt;/td>
&lt;td style="text-align:left">panic&lt;/td>
&lt;td style="text-align:left">成功&lt;/td>
&lt;td style="text-align:left">panic&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>