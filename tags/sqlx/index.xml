<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sqlx on AXLROSE</title><link>https://echotrue.github.io/tags/sqlx/</link><description>Recent content in Sqlx on AXLROSE</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>axlrose.huang@gmail.com (Axlrose)</managingEditor><webMaster>axlrose.huang@gmail.com (Axlrose)</webMaster><copyright>2023 Axlrose rights reserved</copyright><lastBuildDate>Thu, 04 Aug 2022 14:50:30 +0800</lastBuildDate><atom:link href="https://echotrue.github.io/tags/sqlx/index.xml" rel="self" type="application/rss+xml"/><item><title>Sqlx</title><link>https://echotrue.github.io/blog/golang/sqlx/</link><pubDate>Thu, 04 Aug 2022 14:50:30 +0800</pubDate><author>axlrose.huang@gmail.com (Axlrose)</author><guid>https://echotrue.github.io/blog/golang/sqlx/</guid><description>&lt;h3 id="handle-types-引用类型">Handle Types (引用类型)&lt;/h3>
&lt;p>&lt;code>sqlx&lt;/code>旨在和&lt;code>database/sql&lt;/code>具有相同的感觉，他有四种引用类型&lt;/p>
&lt;ul>
&lt;li>&lt;code>sqlx.DB&lt;/code> 类似于&lt;code>sql.DB&lt;/code>,是数据库的表示&lt;/li>
&lt;li>&lt;code>sqlx.Tx&lt;/code>类似于&lt;code>sql.Tx&lt;/code>,是事务的表示&lt;/li>
&lt;li>&lt;code>sqlx.Stmt&lt;/code>类似于&lt;code>sql.Stmt&lt;/code>,是预处理语句的表示&lt;/li>
&lt;li>&lt;code>sqlx.NamedStmt&lt;/code>是一种支持命名参数的预处理语句的表示&lt;/li>
&lt;/ul>
&lt;p>引用类型都嵌入了他们在&lt;code>database/sql&lt;/code>中的等效物，这就意味着当你调用&lt;code>sqlx.DB.Query()&lt;/code>，实际是调用与&lt;code>sql.DB.Query&lt;/code>相同的代码。&lt;/p>
&lt;p>除此之外，还有两种光标类型：&lt;/p>
&lt;h3 id="querying-101-查询概述">Querying 101 (查询概述)&lt;/h3>
&lt;p>引用类型实现了以下相同的操作来查询数据库&lt;/p>
&lt;ul>
&lt;li>&lt;code>Exec(...) (sql.Result, error)&lt;/code> - unchanged from database/sql&lt;/li>
&lt;li>&lt;code>Query(...) (*sql.Rows, error)&lt;/code> - unchanged from database/sql&lt;/li>
&lt;li>&lt;code>QueryRow(...) *sql.Row&lt;/code> - unchanged from database/sql&lt;/li>
&lt;/ul>
&lt;p>以下这些是内置操作的扩展&lt;/p>
&lt;ul>
&lt;li>&lt;code>MustExec() sql.Result&lt;/code> &amp;ndash; Exec, but panic on error&lt;/li>
&lt;li>&lt;code>Queryx(...) (*sqlx.Rows, error)&lt;/code> - Query, but return an sqlx.Rows&lt;/li>
&lt;li>&lt;code>QueryRowx(...) *sqlx.Row&lt;/code> &amp;ndash; QueryRow, but return an sqlx.Row&lt;/li>
&lt;/ul>
&lt;p>还有这些新的语义：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Get(dest interface{}, ...) error&lt;/code>&lt;/li>
&lt;li>&lt;code>Select(dest interface{}, ...) error&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="exec-and-mustexec">Exec and MustExec&lt;/h4>
&lt;p>这两个方法都是用于执行插入，修改以及DDL语句。区别是他们的错误处理机制不一样，&lt;code>Exec&lt;/code>会将结果和错误返回，由开发者自行处理。而&lt;code>MustExec&lt;/code>遇到错误会抛出恐慌&lt;code>panic&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Create table
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">schema&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">`CREATE TABLE place (country text,city text NULL,telcode integer);`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Exec&lt;/span>(&lt;span style="color:#a6e22e">schema&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Insert
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">schema&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">`INSERT INTO place (country,telcode) VALUES (?,?)`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">MustExec&lt;/span>(&lt;span style="color:#a6e22e">schema&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hong Kong&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">852&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//result.LastInsertId()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//result.RowsAffected()
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="query">Query&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// fetch all places from the db
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">rows&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SELECT country, city, telcode FROM place&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// iterate over each row
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">country&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// note that city can be NULL, so we use the NullString type
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">city&lt;/span> &lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">NullString&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">telcode&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Scan&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">country&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">city&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">telcode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// check the error from rows
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Err&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>应该像数据库游标一样看待&lt;code>Rows&lt;/code>，而不是将其看作一个具体的结果集。尽管数据库驱动缓冲行为有所不同，但是通过&lt;code>Next()&lt;/code>迭代能够有效的约束大型查询结果集的内存使用，因为一次只扫描一行。&lt;code>Scan()&lt;/code>通过反射来将数据库列的类型映射到&lt;code>Go&lt;/code>的类型，例如：string,[]byte等等。如果不迭代所有行的结果，请确保调用&lt;code>rows.Close()&lt;/code>以便将连接返回到连接池。
&lt;code>Query&lt;/code>查询返回的&lt;code>error&lt;/code>是数据库服务&lt;code>preparing&lt;/code>或&lt;code>executing&lt;/code>过程中发生的任意错误。这些错误包含从连接池中获取无效的连接，尽管&lt;code>database/sql&lt;/code>会重试10次来尝试找到或创建正常的连接。通常，这些错误是由SQL语法错误，类型错误，字段名和表明错误引起。
大多数情况下，&lt;code>Rows.Scan&lt;/code>会复制其从数据库驱动中获取的数据，因为它不知道数据库驱动将会如何重复使用缓冲区。特殊类型&lt;code>sql.RawBytes&lt;/code>可以用来从数据库驱动返回的实际数据中获取一个零拷贝的字节切片。下次调用&lt;code>Next()&lt;/code>之后，这个值将不再有效，因为这个值所在的内存可能已经被覆盖。
&lt;code>Query&lt;/code>查询使用的连接会一直保持活跃状态，直到通过&lt;code>Next()&lt;/code>迭代完查询出的所有行，或者&lt;code>rows.Close()&lt;/code>被调用。此时，连接才会被释放。
&lt;code>Queryx&lt;/code>和&lt;code>Query&lt;/code>用法基本一样，只是他返回一个&lt;code>sqlx.Rows&lt;/code>对象，这个对象拥有更加丰富的&lt;code>scan&lt;/code>行为可供选择。&lt;/p>
&lt;pre tabindex="0">&lt;code>type Place struct {
Country string
City sql.NullString
TelephoneCode int `db:&amp;#34;telcode&amp;#34;`
}
rows, err := db.Queryx(&amp;#34;SELECT * FROM place&amp;#34;)
for rows.Next() {
var p Place
err = rows.StructScan(&amp;amp;p)
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>StructScan()&lt;/code>是&lt;code>sql.Rows&lt;/code>主要的扩展行为，他会扫描查询结果并映射到结构体字段中。注意，这些字段必须是导出的（首字母大写），以便&lt;code>sqlx&lt;/code>能够将数据写入，这个规则适用于Go中的所有类型（json,xml）的&lt;code>Marshalling&lt;/code>(编码)和&lt;code>UNMarshalling&lt;/code>(解码)。可以使用结构体标签&lt;code>db&lt;/code>指定数据表列名和结构体字段的映射关系，或者使用&lt;code>db.MapperFunc()&lt;/code>设置新的默认映射关系。默认是使用&lt;code>strings.Lower&lt;/code>将结构体字段转小写来匹配数据表列名。&lt;/p>
&lt;h4 id="queryrow">QueryRow&lt;/h4>
&lt;p>&lt;code>QueryRow&lt;/code>从数据表提取一条记录。它从连接池中获取一个连接，然后通过&lt;code>Query&lt;/code>执行查询，返回一个内部包含&lt;code>Rows&lt;/code>对象的&lt;code>Row&lt;/code>对象。
与&lt;code>Query&lt;/code>不同，&lt;code>QueryRow&lt;/code>返回没有错误的&lt;code>Row&lt;/code>类型结果，使得对查询结果的链式&lt;code>Scan&lt;/code>操作是安全的。如果执行查询过程中发生错误，错误会通过&lt;code>Scan&lt;/code>返回。如果没有查询到结果，&lt;code>Scan&lt;/code>返回&lt;code>sql.ErrNoRows&lt;/code>错误。如果&lt;code>Scan&lt;/code>本身发生错误（例如：类型不匹配）,错误同样会被返回。
查询结果&lt;code>Row&lt;/code>内部的&lt;code>Rows&lt;/code>结构体在&lt;code>Scan&lt;/code>执行完后会关闭，这就意味着，&lt;code>QueryRow&lt;/code>查询所在的数据库连接一直会保持到查询结果被扫描完。同样意味着&lt;code>sql.RawBytes&lt;/code>在这里也不可用，由于被引用的内存块属于数据库驱动，并且调用返回时该内存块可能已经无效。
&lt;code>sqlx&lt;/code>扩展的方法&lt;code>QueryRowx&lt;/code>会返回&lt;code>sqlx.Row&lt;/code>代替&lt;code>sql.Row&lt;/code>，它实现了上述介绍以及高阶扫描中&lt;code>Rows&lt;/code>相同的扫描扩展。&lt;/p>
&lt;h4 id="get-and-select">Get and Select&lt;/h4>
&lt;p>&lt;code>Get&lt;/code>和&lt;code>Select&lt;/code>是引用类型的节省时间的扩展，它将查询的执行和灵活的扫描语义相结合。为了清楚的解释它们，我们不得不谈论下什么是&lt;code>scannable&lt;/code>(可扫描的)：&lt;/p>
&lt;ul>
&lt;li>不是结构体类型的值是可扫描的，例如：&lt;code>string&lt;/code>, &lt;code>int&lt;/code>&lt;/li>
&lt;li>实现了&lt;code>sql.Scanner&lt;/code>接口的值是可扫描的&lt;/li>
&lt;li>没有导出字段的结构体可以是扫描的(eg. &lt;code>time.Time&lt;/code>)
&lt;code>Get&lt;/code>和&lt;code>Select&lt;/code>使用&lt;code>rows.Scan&lt;/code>在可扫描类型上，使用&lt;code>rows.StructScan&lt;/code>在不可扫描类型上。它们与&lt;code>QueryRow&lt;/code>和&lt;code>Query&lt;/code>大致相似，&lt;code>Get&lt;/code>主要用来获取单条记录并扫描它，&lt;code>Select&lt;/code>主要用来获取一个结果集。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Place&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">pp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#a6e22e">Place&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// this will pull the first place directly into p
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SELECT * FROM place LIMIT 1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// this will pull places with telcode &amp;gt; 50 into the slice pp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Select&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pp&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SELECT * FROM place WHERE telcode &amp;gt; ?&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// they work with regular types as well
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SELECT count(*) FROM place&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// fetch at most 10 place names
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Select&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">names&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SELECT name FROM place LIMIT 10&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Get&lt;/code>和&lt;code>Select&lt;/code>都将会关闭它们在查询执行过程中创建的&lt;code>Rows&lt;/code>对象，并且返回在这个过程中发生的任何错误。由于它们在内部使用&lt;code>StructScan&lt;/code>,因此&amp;quot;高级扫描&amp;quot;中介绍的部分也适用于这两个方法。
&lt;code>Select&lt;/code>可以为你节省很多输入，但是，请谨记！它在语义上和&lt;code>Queryx&lt;/code>不同，因为它会将整个查询结果集一次性的加载进内存，如果这个结果集没有被查询限制到一个合理的大小，使用经典的&lt;code>Queryx/StructScan&lt;/code>迭代反而是更好的选择。&lt;/p>
&lt;h3 id="transactions-事务">Transactions (事务)&lt;/h3>
&lt;p>要使用事务，首选需要通过&lt;code>DB.Begin()&lt;/code>创建一个事务的引用对象。记住，&lt;code>Exec&lt;/code>以及其他查询动作每次都会向&lt;code>DB&lt;/code>索要一个连接，并且最终会将连接放回连接池。由于无法保证你每次索要的连接与&lt;code>Begin()&lt;/code>执行时所在的连接是同一个连接，所以，要使用事务，必须先调用&lt;code>DB.Begin()&lt;/code>.正确的使用方法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">tx&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Begin&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">tx&lt;/span>.&lt;span style="color:#a6e22e">Exec&lt;/span>(&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">tx&lt;/span>.&lt;span style="color:#a6e22e">Commit&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>DB&lt;/code>引用也有扩展行为&lt;code>Beginx()&lt;/code>和&lt;code>MustBegin()&lt;/code>,他们返回&lt;code>sqlx.Tx&lt;/code>而不是&lt;code>sql.Tx&lt;/code>。&lt;code>sqlx.Tx&lt;/code>拥有&lt;code>sqlx.DB&lt;/code>的所有扩展行为。
一旦事务是连接状态，&lt;code>Tx&lt;/code>对象必须绑定并限定为单个从池中获取的连接，&lt;code>Tx&lt;/code>在其整个生命周期中都将维持单个连接，只有调用&lt;code>Commit()&lt;/code>或&lt;code>Rollback()&lt;/code>才会释放连接。需要注意的是你应该至少调用这两个方法中的一个，否则，连接将会一直保持直到被GC回收。
由于在事务中只有一个连接可以被使用，所以一次只能执行一条语句。在执行其他查询之前，必须分别扫描完或关闭&lt;code>Row&lt;/code> 和 &lt;code>Rows&lt;/code>。在数据库服务器向你发送结果的时候，如果你尝试向数据库发送数据，这很可能会破坏当前连接。
&lt;code>Tx&lt;/code>对象实际并不意味着在服务器上的任何行为，它只是执行了&lt;code>begin&lt;/code>语句并绑定了单个连接。事务的实际行为，诸如：锁定和隔离等，在此不做具体说明，这些依赖于数据库。&lt;/p>
&lt;h3 id="prepared-statement-预处理语句">Prepared Statement （预处理语句）&lt;/h3>
&lt;p>在大多数数据库中，每当查询被执行时，语句会在后台被预处理。然而，你可以使用&lt;code>sqlx.DB.Prepare()&lt;/code>显式的预处理语句，以便在其他地方可以重复使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">stmt&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Prepare&lt;/span>(&lt;span style="color:#e6db74">`SELECT * FROM place WHERE telcode=?`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">row&lt;/span> = &lt;span style="color:#a6e22e">stmt&lt;/span>.&lt;span style="color:#a6e22e">QueryRow&lt;/span>(&lt;span style="color:#ae81ff">65&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">tx&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Begin&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">txStmt&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tx&lt;/span>.&lt;span style="color:#a6e22e">Prepare&lt;/span>(&lt;span style="color:#e6db74">`SELECT * FROM place WHERE telcode=?`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">row&lt;/span> = &lt;span style="color:#a6e22e">txStmt&lt;/span>.&lt;span style="color:#a6e22e">QueryRow&lt;/span>(&lt;span style="color:#ae81ff">852&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Prepare&lt;/code>实际会在数据库执行预处理操作，所以，它需要占用一个链接。&lt;code>database/sql&lt;/code>会抽象这一点：通过自动在新的链接上执行预处理操作，允许你使用同一个&lt;code>Stmt&lt;/code>对象同时在多个连接上执行语句。&lt;code>Preparex()&lt;/code>返回一个&lt;code>sqlx.Stmt&lt;/code>对象，它拥有&lt;code>sqlx.DB&lt;/code>和&lt;code>sqlx.Tx&lt;/code>两个扩展的所有行为。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">stmt&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Preparex&lt;/span>(&lt;span style="color:#e6db74">`SELECT * FROM place WHERE telcode=?`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#a6e22e">Place&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">stmt&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#ae81ff">852&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>标准的&lt;code>sql.Tx&lt;/code>对象也有一个&lt;code>Stmt()&lt;/code>方法，它从一个已存在的&lt;code>Stmt&lt;/code>对象中返回一个用于事务的特定&lt;code>Stmt&lt;/code>对象。&lt;code>sqlx.Tx&lt;/code>也有一个&lt;code>Stmtx&lt;/code>的版本，它从一个已存在的&lt;code>sql.Stmt&lt;/code>或&lt;code>sqlx.Stmt&lt;/code>对象中创建一个用于事务的特定&lt;code>sqlx.Stmt&lt;/code>对象。
关于&lt;code>Stmt&lt;/code>对象，可参考&lt;code>pkg.go.dev&lt;/code>中&lt;code>database/sql&lt;/code>文档中的阶段概述：&lt;/p>
&lt;blockquote>
&lt;p>Stmt is a prepared statement. A Stmt is safe for concurrent use by multiple goroutines.
If a Stmt is prepared on a Tx or Conn, it will be bound to a single underlying connection forever. If the Tx or Conn closes, the Stmt will become unusable and all operations will return an error. If a Stmt is prepared on a DB, it will remain usable for the lifetime of the DB. When the Stmt needs to execute on a new underlying connection, it will prepare itself on the new connection automatically.&lt;/p>
&lt;/blockquote>
&lt;h3 id="query-helpers">Query Helpers&lt;/h3>
&lt;p>&lt;code>database/sql&lt;/code>包不对查询语句文本做任何封装操作。这使得在&lt;code>sql&lt;/code>代码中使用特定于后端的特性变得琐碎。你可以像在数据库中一样迅速的编写查询语句。虽然这很灵活，但是在编写某些类型的查询语句变得困难。&lt;/p>
&lt;h4 id="in-queries">In Queries&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">levels&lt;/span> = []&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">query&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sqlx&lt;/span>.&lt;span style="color:#a6e22e">In&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SELECT * FROM users WHERE level IN (?);&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">levels&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// sqlx.In returns queries with the `?` bindvar, we can rebind it for our backend
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">query&lt;/span> = &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Rebind&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">rows&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>db.Rebind&lt;/code>可以用来获取适用于你的数据库驱动的&lt;code>query&lt;/code>格式。例如：MySQL使用&lt;code>?&lt;/code>作为占位符，而SQLite则可以使用&lt;code>?&lt;/code>和&lt;code>$1&lt;/code>作为占位符。具体参考&lt;code>bindvars&lt;/code>章节&lt;/p>
&lt;h4 id="named-queries">Named Queries&lt;/h4>
&lt;p>命名查询，通过映射到结构体字段名或者&lt;code>map&lt;/code>的&lt;code>key&lt;/code>来绑定变量到查询。不必映射所有字段。他包含两个与命名查询相关的查询动作：&lt;/p>
&lt;ul>
&lt;li>NamedQuery(&amp;hellip;) (*sqlx.Rows, error) - like Queryx, but with named bindvars&lt;/li>
&lt;li>NamedExec(&amp;hellip;) (sql.Result, error) - like Exec, but with named bindvars
和一个额外引用类型查询动作：&lt;/li>
&lt;li>NamedStmt - an sqlx.Stmt which can be prepared with named bindvars&lt;/li>
&lt;/ul>
&lt;p>使用示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// named query with a struct
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Place&lt;/span>{&lt;span style="color:#a6e22e">Country&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;South Africa&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">rows&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">NamedQuery&lt;/span>(&lt;span style="color:#e6db74">`SELECT * FROM place WHERE country=:country`&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// named query with a map
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#e6db74">&amp;#34;city&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Johannesburg&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">NamedExec&lt;/span>(&lt;span style="color:#e6db74">`SELECT * FROM place WHERE city=:city`&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查询所有结果集：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Place&lt;/span>{&lt;span style="color:#a6e22e">TelephoneCode&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">pp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#a6e22e">Place&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// select all telcodes &amp;gt; 50
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">nstmt&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">PrepareNamed&lt;/span>(&lt;span style="color:#e6db74">`SELECT * FROM place WHERE telcode &amp;gt; :telcode`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">nstmt&lt;/span>.&lt;span style="color:#a6e22e">Select&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pp&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>命名查询通过解析&lt;code>:param&lt;/code>语法并将其替换为底层数据库支持的占位符，然后在执行的时候映射查询条件。所以它适用于所有&lt;code>sqlx&lt;/code>支持的数据库。你也可以使用&lt;code>sqlx.Named&lt;/code>，他使用&lt;code>?&lt;/code>占位符，并且可以和&lt;code>sqlx.In&lt;/code>组合使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">arg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;published&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;authors&amp;#34;&lt;/span>: []{&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">19&lt;/span>, &lt;span style="color:#ae81ff">32&lt;/span>, &lt;span style="color:#ae81ff">44&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">query&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sqlx&lt;/span>.&lt;span style="color:#a6e22e">Named&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">arg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">query&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sqlx&lt;/span>.&lt;span style="color:#a6e22e">In&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">query&lt;/span> = &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Rebind&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>, &lt;span style="color:#a6e22e">args&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="advanced-scanning">Advanced Scanning&lt;/h3>
&lt;p>&lt;code>StructScan&lt;/code>看似复杂。他支持结构体嵌套，并且使用与&lt;code>Go&lt;/code>的属性嵌套及方法访问相同的优先级规则分配字段。一个常见的用法是在多个表之间共享表模型的公共部分。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">AutoIncr&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ID&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Created&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Place&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Address&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AutoIncr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AutoIncr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码中：&lt;code>Person&lt;/code>和&lt;code>Place&lt;/code>将都可以从&lt;code>StructScan&lt;/code>接收&lt;code>id&lt;/code>和&lt;code>created&lt;/code>列的值，因为他们都嵌套了&lt;code>AutoIncr&lt;/code>结构体。这个特性可以让你快速的为链表查询创建临时表。他可以递归的工作。下面的&lt;code>Employee&lt;/code>结构体拥有&lt;code>Person&lt;/code>的&lt;code>Name&lt;/code>字段以及&lt;code>AutoIncr&lt;/code>的 &lt;code>ID&lt;/code>和&lt;code>Created&lt;/code>字段的访问权限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">BossID&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">EmployeeID&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：&lt;code>sqlx&lt;/code>历史版本为非嵌入式结构体支持此特性，这使得开发者感到困惑。因为有用户利用此特性定义关系并嵌入相同的结构体两次：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Child&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Father&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Mother&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这会引起一些问题。在Go中隐藏派生字段是合法的.如果上面的&lt;code>Employee&lt;/code>定义了&lt;code>Name&lt;/code>字段，他的优先级将会高于&lt;code>Person&lt;/code>结构体的&lt;code>Name&lt;/code>字段。但是模糊的选择器是非法的且会引起运行时错误。如果我们想要为&lt;code>Person&lt;/code>和&lt;code>Place&lt;/code>快速的创建链表查询，我们应该将&lt;code>id&lt;/code>定义到哪里？是他们两个结构体都嵌入的&lt;code>AutoIncr&lt;/code>结构体中？这是否会有错误？
由于&lt;code>sqlx&lt;/code>构建字段名到字段地址的映射方式，当你扫描数据到结构体时，它并不知道在遍历结构体树的过程中是否遇到了同一个字段名两次。所以，与Go不同，&lt;code>StructScan&lt;/code>将会选择首次遇到的这个字段。由于Go结构体字段是从上到下排序，并且&lt;code>sqlx&lt;/code>使用广度优先原则便利以维持优先级原则，因此&lt;code>StructScan&lt;/code>使用最浅层（多层嵌套情况下），且最前面的定义的字段。
例如：在以下结构体中，&lt;code>StructScan&lt;/code>会将&lt;code>id&lt;/code>列的值赋给&lt;code>Persion.AutoIncr.ID&lt;/code>,也可以通过&lt;code>Persion.ID&lt;/code>来访问。为了避免混淆，建议在你的SQL种使用&lt;code>AS&lt;/code>关键字为列设置别名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">PersonPlace&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Place&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="scan-destination-safety">Scan Destination Safety&lt;/h4>
&lt;p>通常情况下，如果列的值不能映射到目标数据结构的字段上，&lt;code>StructScan&lt;/code>会返回一个错误。这模仿了Go中对未使用变量的处理方式，但是与标准库编码解码包例如：&lt;code>encoding/json&lt;/code>不同。因为SQL通常以比解析&lt;code>JSON&lt;/code>更可控的方式执行，这些错误通常是编码错误，默认情况下会返回错误。
像未使用的变量一样，你忽略的列是对网络和数据库资源的浪费，并且，在没有映射器告诉你一些东西未找到的情况下，尽早的检测出不兼容的映射和结构体标签中的错别字是非常困难的。
尽管如此，在某些情况下需要忽略没有目标结构的列。为此，每一种引用类型都实现了一个&lt;code>Unsafe&lt;/code>方法，它返回这个引用的拷贝，这份拷贝关闭了安全功能。
Unsafe()方法说明：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Unsafe returns a version of DB which will silently succeed to scan when
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// columns in the SQL result have no fields in the destination struct.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// sqlx.Stmt and sqlx.Tx which are created from this DB will inherit its
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// safety behavior.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">db&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">DB&lt;/span>) &lt;span style="color:#a6e22e">Unsafe&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">DB&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">DB&lt;/span>{&lt;span style="color:#a6e22e">DB&lt;/span>: &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">DB&lt;/span>, &lt;span style="color:#a6e22e">driverName&lt;/span>: &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">driverName&lt;/span>, &lt;span style="color:#a6e22e">unsafe&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#a6e22e">Mapper&lt;/span>: &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Mapper&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Usage：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// err here is not nil because there are no field destinations for columns in `place`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SELECT * FROM person, place LIMIT 1;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// this will NOT return an error, even though place columns have no destination
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">udb&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Unsafe&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">udb&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SELECT * FROM person, place LIMIT 1;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="controlling-name-mappint">Controlling Name Mappint&lt;/h4>
&lt;p>用作&lt;code>StructScan&lt;/code>目标的结构体字段必须大写才能被&lt;code>sqlx&lt;/code>访问。因此，&lt;code>sqlx&lt;/code>使用&lt;code>NameMapper&lt;/code>将&lt;code>strings.ToLower&lt;/code>应用到字段名以映射他们到查询的结果的列。这并不总是可取的，依赖于数据库对象，所以&lt;code>sqlx&lt;/code>允许通过多种方式自定义映射。
最简单的一种方式就是通过&lt;code>sqlx.DB.MapperFunc&lt;/code>为引用类型设置映射，改方法接受一个&lt;code>func(string)string&lt;/code>类型的参数。如果你的库需要特定的映射器，并且你不想污染&lt;code>sqlx.DB&lt;/code>，你可以创建一个&lt;code>DB&lt;/code>拷贝用于特定映射场景。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// if our db schema uses ALLCAPS columns, we can use normal fields
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">MapperFunc&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">ToUpper&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// suppose a library uses lowercase columns, we can create a copy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">copy&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sqlx&lt;/span>.&lt;span style="color:#a6e22e">NewDb&lt;/span>(&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">DB&lt;/span>, &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">DriverName&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">copy&lt;/span>.&lt;span style="color:#a6e22e">MapperFunc&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">ToLower&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>sqlx.DB&lt;/code>使用 &lt;code>sqlx/reflectx&lt;/code>包的 &lt;code>Mapper&lt;/code> 来实现底层的映射逻辑，并且通过 &lt;code>sqlx.DB.Mapper&lt;/code>导出当前活跃的映射器。你可以通过直接设置来自定义数据库上的映射器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/jmoiron/sqlx/reflectx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Create a new mapper which will use the struct field tag &amp;#34;json&amp;#34; instead of &amp;#34;db&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Mapper&lt;/span> = &lt;span style="color:#a6e22e">reflectx&lt;/span>.&lt;span style="color:#a6e22e">NewMapperFunc&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;json&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">ToLower&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="alternate-scan-types">Alternate Scan Types&lt;/h4>
&lt;p>除了使用 &lt;code>StructScan&lt;/code> 和 &lt;code>Scan&lt;/code> ,&lt;code>sqlx&lt;/code>的查询行结果也可以返回切片或 &lt;code>map&lt;/code>集合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">rows&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Queryx&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SELECT * FROM place&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// cols is an []interface{} of all of the column results
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cols&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">SliceScan&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">rows&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">Queryx&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SELECT * FROM place&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">results&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">rows&lt;/span>.&lt;span style="color:#a6e22e">MapScan&lt;/span>(&lt;span style="color:#a6e22e">results&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>SliceScan&lt;/code>一般使用在你不知道会返回哪些字段的情况下。&lt;code>MapScan&lt;/code>与之相同，但 &lt;code>MapScan&lt;/code>将列映射到 &lt;code>interface{}&lt;/code>类型值上。这里需要重点注意的是， &lt;code>rows.Columns()&lt;/code>返回的结果不包含完整的名称。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Go" data-lang="Go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">SELECT&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#a6e22e">FROM&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#a6e22e">NATURAL&lt;/span> &lt;span style="color:#a6e22e">JOIN&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将会导致一个 &lt;code>[]string{&amp;quot;id&amp;quot;,&amp;quot;id&amp;quot;}&lt;/code>格式的列结果，这破坏了你的map中的一个结果。&lt;/p>
&lt;h3 id="custom-types">Custom Types&lt;/h3>
&lt;p>上面的列子都使用了内置类型来扫描或者查询，但是 &lt;code>database/sql&lt;/code> 提供了接口允许你使用自定义的类型：&lt;/p>
&lt;ul>
&lt;li>sql.Scanner allows you to use custom types in a Scan()&lt;/li>
&lt;li>driver.Valuer allows you to use custom types in a Query/QueryRow/Exec
这些是标准的接口，使用他们可以确保在 &lt;code>database/sql&lt;/code> 上提供的服务可以移植到任何库。具体如何使用请参考 &lt;a href="http://jmoiron.net/blog/built-in-interfaces">Built In Interfaces&lt;/a> 这篇文章，或者查看 &lt;code>sqlx/types&lt;/code> 包，改包实现了一些标准的实用类型。&lt;/li>
&lt;/ul>
&lt;h3 id="the-connection-pool">The Connection Pool&lt;/h3>
&lt;p>准备语句和查询的执行都需要连接，&lt;code>DB&lt;/code>对象会管理一个连接池，以保证它可以进行安全的并发查询。有两种方法可以控制连接池的大小：&lt;/p>
&lt;ul>
&lt;li>DB.SetMaxIdleConns(n int)&lt;/li>
&lt;li>DB.SetMaxOpenConns(n int)
默认情况下，池子可以无限增长，并且只要池中没有可用连接，就会创建一个连接。你可以使用 &lt;code>DB.SetMaxOpenConns&lt;/code>设置最大连接数。未使用的连接会被标记为空闲，如果他们不被需要将会被关闭。为避免建立和关闭大量连接，使用 &lt;code>DB.SetMaxIdleConns&lt;/code> 将最大空闲连接数设置为适合你查询负载的大小是一种明智的选择。
很容易陷入阻塞连接的困境中，为了防止这种情况：&lt;/li>
&lt;li>确保 &lt;code>Scan()&lt;/code> 每个row对象&lt;/li>
&lt;li>确保通过 &lt;code>Next()&lt;/code>对每个Rows对象进行完整迭代或调用&lt;code>Close()&lt;/code>&lt;/li>
&lt;li>确保每一个事务都通过 &lt;code>Commit()&lt;/code> 或 &lt;code>Rollback()&lt;/code> 返回连接&lt;/li>
&lt;/ul>
&lt;p>如果你忘记这些操作，连接将会一直阻塞直到被 &lt;code>GC&lt;/code> 回收，并且你的数据库会立刻停止建立更多的连接，以此抵消当前正在使用的这个链接。注意 &lt;code>Rows.Close()&lt;/code> 可以被多次安全的调用，所以不用担心在不需要的地方调用它。&lt;/p></description></item></channel></rss>