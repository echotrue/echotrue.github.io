<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>并发安全 on Axlrose's blog</title><link>http://echotrue.github.io/tags/%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/</link><description>Recent content in 并发安全 on Axlrose's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Axlrose</copyright><atom:link href="http://echotrue.github.io/tags/%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang Data Races</title><link>http://echotrue.github.io/golang/data-races/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://echotrue.github.io/golang/data-races/</guid><description>关于Golang并发安全 谈谈go语言编程的并发安全 Benign Data Races: What Could Possibly Go Wrong? 什么是数据竞争 package main import ( &amp;#34;fmt&amp;#34; ) func main() { var i int go func() { i = 5 }() fmt.Println(i) } 先通过以上程序来了解什么是数据竞争。首先声明一个变量i，默认值为0。然后开启一个单独的goroutine来设置i的值。 同时，在不知道开启的goroutine是否已经执行完成的情况下打印i的值。所以，当前正在发生两个操作：
变量i的值正在被设置为5 打印i的值 所以，最后程序打印出来的值可能是0或者5。这就叫数据竞争，i的值根据以上两个操作哪一个先完成而不同。
检测数据竞争 Golang有一个内置的数据竞争检测器，只需要在使用Go命令行工具的时候添加-race标志。例如：让我们尝试用-race标志来 运行我们刚刚编写的程序：
$ go run -race main.go 0 ================== WARNING: DATA RACE Write at 0x00c000122068 by goroutine 7: main.main.func1() F:/go_project/api-service/test/core/main.go:10 +0x3f Previous read at 0x00c000122068 by main goroutine: main.main() F:/go_project/api-service/test/core/main.go:12 +0x8f Goroutine 7 (running) created at: main.</description></item></channel></rss>