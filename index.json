[
{
	"uri": "http://echotrue.github.io/golang_post/",
	"title": "Golang",
	"tags": [],
	"description": "",
	"content": "Post list Blog articles \rContext\r\r\rArray And Slice\r\r\rLock\r\r\rGolang make and new\r\r\rPanic and Recover\r\r\rGolang Select\r\r\rAddressable and Unaddressable-Value\r\r\rBlock forever in go\r\r\rGolang channel\r\r\rGolang Data Races\r\r\r"
},
{
	"uri": "http://echotrue.github.io/golang_post/context/",
	"title": "Context",
	"tags": ["Go", "context", "上下文"],
	"description": "",
	"content": "引言 Golang的Context包是专门用来简化对于处理单个请求的多个goroutine之间与请求域的数据，取消信号，截止时间等相关操作。 一个实际的例子是：\n 在Go服务器程序中，每个请求都会有一个goroutine去处理。然而，处理程序可能还需要创建额外的goroutine去访问其他资源，比如：数据库， RPC服务等。由于这些goroutine都是在处理同一个请求，所以他们往往需要访问一些共享的资源，比如：用户身份信息，认证token ，请求截止时间等。当请求超时或者被取消后，所有的goroutine都应该马上退出并且释放相关的资源。这种情况也需要用Context来为我们来取消掉所有 的goroutine\n Context定义 context的主要数据结构是一种嵌套的结构或者说是单向的继承关系的结构，比如最初的context是一个小盒子，里面装了一些数据， 之后从这个context继承下来的children就像在原本的context中又套上了一个盒子，然后里面装着一些自己的数据。或者说context是一种分层的结构， 根据使用场景的不同，每一层context都具备有一些不同的特性，这种层级式的组织也使得context易于扩展，职责清晰。\ncontext包的核心是interface Context ,声明如下：\ntype Context interface { Deadline() (deadline time.Time, ok bool) Done() \u0026lt;-chan struct{} Err() error Value(key interface{}) interface{} } Context定义很简单，一共四个方法：\n Deadline方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context会自动发起取消请求； 第二个返回值ok==false时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。 Done方法返回一个只读的chan，类型为struct{}，我们在goroutine中，如果该方法返回的chan可以读取， 则意味着parent context已经发起了取消请求，我们通过Done方法收到这个信号后，就应该做清理操作，然后退出goroutine，释放资源。之后，Err 方法会返回一个错误，告知为什么 Context 被取消。 Err方法返回取消的错误原因，因为什么Context被取消。 Value方法获取该Context上绑定的值，是一个键值对，所以要通过一个Key才可以获取对应的值，这个值一般是线程安全的。  Context的实现方法 Context 虽然是个接口，但是并不需要使用方实现，golang内置的context 包，已经帮我们实现了2个方法，一般在代码中， 开始上下文的时候都是以这两个作为最顶层的parent context，然后再衍生出子context。这些 Context 对象形成一棵树： 当一个 Context 对象被取消时，继承自它的所有 Context 都会被取消。两个实现如下：\nvar ( background = new(emptyCtx) todo = new(emptyCtx) ) func Background() Context { return background } func TODO() Context { return todo }  一个是Background，主要用于main函数、初始化以及测试代码中，作为Context这个树结构的最顶层的Context，也就是根Context，它不能被取消。 一个是TODO，如果我们不知道该使用什么Context的时候，可以使用这个，但是实际应用中，暂时还没有使用过这个TODO。 他们两个本质上都是emptyCtx结构体类型，是一个不可取消，没有设置截止时间，没有携带任何值的Context。  type emptyCtx int func (*emptyCtx) Deadline() (deadline time.Time, ok bool) { return } func (*emptyCtx) Done() \u0026lt;-chan struct{} { return nil } func (*emptyCtx) Err() error { return nil } func (*emptyCtx) Value(key interface{}) interface{} { return nil } Context的继承 有了如上的根Context，那么是如何衍生更多的子Context的呢？这就要靠context包为我们提供的With系列的函数了。\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc) func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) func WithValue(parent Context, key, val interface{}) Context 通过这些函数，就创建了一颗Context树，树的每个节点都可以有任意多个子节点，节点层级可以有任意多个。\n WithCancel函数，传递一个父Context作为参数，返回子Context，以及一个取消函数用来取消Context。 WithDeadline函数，和WithCancel差不多，它会多传递一个截止时间参数，意味着到了这个时间点，会自动取消Context，当然我们也可以不等到这个时候，可以提前通过取消函数进行取消。 WithTimeout和WithDeadline基本上一样，这个表示是超时自动取消，是多少时间后自动取消Context的意思。 WithValue函数和取消Context无关，它是为了生成一个绑定了一个键值对数据的Context，这个绑定的数据可以通过Context.Value方法访问到，这是我们实际用经常要用到的技巧，一般我们想要通过上下文来传递数据时，可以通过这个方法，如我们需要tarce追踪系统调用栈的时候。  Context使用技巧和原则  不要把Context放在结构体中，要以参数的方式传递，parent Context一般为Background 应该要把Context作为第一个参数传递给入口请求和出口请求链路上的每一个函数，放在第一位，变量名建议都统一，如ctx。 给一个函数方法传递Context的时候，不要传递nil，否则在tarce追踪的时候，就会断了连接 Context的Value相关方法应该传递必须的数据，不要什么数据都使用这个传递 Context是线程安全的，可以放心的在多个goroutine中传递 可以把一个 Context 对象传递给任意个数的 gorotuine，对它执行 取消 操作时，所有 goroutine 都会接收到取消信号。  Context使用示例 请求链路传值 func func1(ctx context.Context) { ctx = context.WithValue(ctx, \u0026quot;k1\u0026quot;, \u0026quot;v1\u0026quot;) func2(ctx) } func func2(ctx context.Context) { fmt.Println(ctx.Value(\u0026quot;k1\u0026quot;).(string)) } func main() { ctx := context.Background() func1(ctx) } 我们在func1通过WithValue(parent Context, key, val interface{}) Context，赋值k1为v1， 在其下层函数func2通过ctx.Value(key interface{}) interface{}获取k1的值，比较简单。这里有个疑问，如果我是在func2里赋值， 在func1里面能够拿到这个值吗？答案是不能，context只能自上而下携带值，这个是要注意的一点。\n取消耗时操作，及时释放资源 主动取消 func func1(ctx context.Context, wg *sync.WaitGroup) error { defer wg.Done() respC := make(chan int) // 处理逻辑 go func() { time.Sleep(time.Second * 5) respC \u0026lt;- 10 }() // 取消机制 select { case \u0026lt;-ctx.Done(): fmt.Println(\u0026quot;cancel.\u0026quot;) return errors.New(\u0026quot;cancel\u0026quot;) case r := \u0026lt;-respC: fmt.Println(r) return nil } } func main() { wg := new(sync.WaitGroup) ctx, cancel := context.WithCancel(context.Background()) wg.Add(1) go func1(ctx, wg) time.Sleep(time.Second * 2) cancel() wg.Wait() } 超时取消 func func1(ctx context.Context) { hctx, hcancel := context.WithTimeout(ctx, time.Second*4) defer hcancel() resp := make(chan struct{}, 1) go func() { // 处理耗时操作 time.Sleep(time.Second * 10) resp \u0026lt;- struct{}{} }() select { // case \u0026lt;-ctx.Done(): // fmt.Println(\u0026quot;ctx timeout\u0026quot;) // fmt.Println(\u0026quot;退出\u0026quot;,ctx.Err()) case \u0026lt;-hctx.Done(): fmt.Println(\u0026quot;hctx timeout\u0026quot;) fmt.Println(hctx.Err()) case v := \u0026lt;-resp: fmt.Println(\u0026quot;test2 function handle done\u0026quot;) fmt.Printf(\u0026quot;result:%v\\n\u0026quot;, v) } fmt.Println(\u0026quot;test2 finish\u0026quot;) fmt.Println(time.Now().Unix()) return } func main() { fmt.Println(time.Now().Unix()) ctx, cancel := context.WithTimeout(context.Background(), time.Second*2) defer cancel() func1(ctx) } "
},
{
	"uri": "http://echotrue.github.io/algorithm/",
	"title": "Algorithm",
	"tags": [],
	"description": "",
	"content": "Algorithm list \rGolang Search Slice\r\r\r"
},
{
	"uri": "http://echotrue.github.io/golang_post/array-slice/",
	"title": "Array And Slice",
	"tags": ["Go", "array", "slice", "数组", "切片"],
	"description": "",
	"content": "数组 数组类型定义了长度和元素类型。数组的长度是固定的，长度是数组类型的一部分。数组不需要显式的初始化；数组的零值是可以直接使用的，数组元素会自动初始化为其对应类型的零值。\nvar arr [4]int // 声明 fmt.Println(arr[1]) // 不需要显式的初始化 arr1 := [2]string{\u0026quot;Penn\u0026quot;, \u0026quot;Teller\u0026quot;} // 数组的字面值 arr2 := [...]string{\u0026quot;Penn\u0026quot;, \u0026quot;Teller\u0026quot;} // 编译器统计数组字面值中的元素数量 fmt.Println(arr1, len(arr1), cap(arr1)) fmt.Println(arr2, len(arr2), cap(arr2)) Go的数组是值语义。当一个数组变量被赋值或者被传递的时候，实际上会复制整个数组。 （为了避免复制数组，你可以传递一个指向数组的指针，但是数组指针并不是数组。）\nfunc update(arr *[2]string) { arr[1] = \u0026quot;axlrose\u0026quot; } func main() { arr1 := [2]string{\u0026quot;Penn\u0026quot;, \u0026quot;Teller\u0026quot;} update(\u0026amp;arr1) fmt.Println(arr1) } 切片的创建和初始化 Golang中切片有三种初始化方式：\n 通过下标的方式获得数组或者切片的一部分； 使用字面量初始化新的切片； 使用关键字 make 创建切片：  arr[0:3] or slice[0:3] slice := []int{1, 2, 3, 4} // 通过字面量创建并初始化长度，容量都为4的切片 slice := []int{99: 0} // 通过字面量创建并初始化长度和容量都是100的切片  slice := make([]int, 3, 4) // make() 创建并初始化长度为3，容量为4的切片  var slice []int // 只创建切片，不初始化。值为nil，又称空切片，它的长度和容量都为0  需要注意的是使用下标初始化切片不会造成原始数组或者切片中数据的拷贝，它只会创建一个指向原始数组的切片值，所以修改新切片的数据也会修改原始切片。\n 零值切片，nil切片和空切片  零切片：切片元素的值均是元素类型所对应的的0值切片  slice1 := make([]int, 10) fmt.Println(slice1) //[0 0 0 0 0 0 0 0 0 0] slice2 := make([]*int,10) fmt.Println(slice2) //[\u0026lt;nil\u0026gt; \u0026lt;nil\u0026gt; \u0026lt;nil\u0026gt; \u0026lt;nil\u0026gt; \u0026lt;nil\u0026gt; \u0026lt;nil\u0026gt; \u0026lt;nil\u0026gt; \u0026lt;nil\u0026gt; \u0026lt;nil\u0026gt; \u0026lt;nil\u0026gt;] 切片追加和扩容 在分配内存空间之前需要先确定新的切片容量，Go 语言根据切片的当前容量选择不同的策略进行扩容：\n 如果期望容量大于当前容量的两倍就会使用期望容量； 如果当前切片的长度小于 1024 就会将容量翻倍； 如果当前切片的长度大于 1024 就会每次增加 25% 的容量，直到新容量大于期望容量；  "
},
{
	"uri": "http://echotrue.github.io/cont/pages/",
	"title": "Pages organization",
	"tags": [],
	"description": "",
	"content": "In Hugo, pages are the core of your site. Once it is configured, pages are definitely the added value to your documentation site.\nFolders Organize your site like any other Hugo project. Typically, you will have a content folder with all your pages.\ncontent\r├── level-one\r│ ├── level-two\r│ │ ├── level-three\r│ │ │ ├── level-four\r│ │ │ │ ├── _index.md \u0026lt;-- /level-one/level-two/level-three/level-four\r│ │ │ │ ├── page-4-a.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-a\r│ │ │ │ ├── page-4-b.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-b\r│ │ │ │ └── page-4-c.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-c\r│ │ │ ├── _index.md \u0026lt;-- /level-one/level-two/level-three\r│ │ │ ├── page-3-a.md \u0026lt;-- /level-one/level-two/level-three/page-3-a\r│ │ │ ├── page-3-b.md \u0026lt;-- /level-one/level-two/level-three/page-3-b\r│ │ │ └── page-3-c.md \u0026lt;-- /level-one/level-two/level-three/page-3-c\r│ │ ├── _index.md \u0026lt;-- /level-one/level-two\r│ │ ├── page-2-a.md \u0026lt;-- /level-one/level-two/page-2-a\r│ │ ├── page-2-b.md \u0026lt;-- /level-one/level-two/page-2-b\r│ │ └── page-2-c.md \u0026lt;-- /level-one/level-two/page-2-c\r│ ├── _index.md \u0026lt;-- /level-one\r│ ├── page-1-a.md \u0026lt;-- /level-one/page-1-a\r│ ├── page-1-b.md \u0026lt;-- /level-one/page-1-b\r│ └── page-1-c.md \u0026lt;-- /level-one/page-1-c\r├── _index.md \u0026lt;-- /\r└── page-top.md \u0026lt;-- /page-top\r _index.md is required in each folder, it’s your “folder home page”\n\rTypes Hugo-theme-learn defines two types of pages. Default and Chapter. Both can be used at any level of the documentation, the only difference being layout display.\nA Chapter displays a page meant to be used as introduction for a set of child pages. Commonly, it contains a simple title and a catch line to define content that can be found under it. You can define any HTML as prefix for the menu. In the example below, it's just a number but that could be an icon.\n+++\rtitle = \u0026#34;Basics\u0026#34;\rchapter = true\rweight = 5\rpre = \u0026#34;\u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt;\u0026#34;\r+++\r### Chapter 1\r\r# Basics\rDiscover what this Hugo theme is all about and the core-concepts behind it.\rTo tell Hugo-theme-learn to consider a page as a chapter, set chapter=true in the Front Matter of the page.\nA Default page is any other content page.\n+++\rtitle = \u0026#34;Installation\u0026#34;\rweight = 15\r+++\rThe following steps are here to help you initialize your new website. If you don't know Hugo at all, we strongly suggest you to train by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u0026lt;new_project\u0026gt;\rHugo-theme-learn provides archetypes to help you create this kind of pages.\nFront Matter configuration Each Hugo page has to define a Front Matter in yaml, toml or json.\nHugo-theme-learn uses the following parameters on top of Hugo ones :\n+++\r# Table of content (toc) is enabled by default. Set this parameter to true to disable it.\r # Note: Toc is always disabled for chapter pages\r disableToc = \u0026#34;false\u0026#34;\r# If set, this will be used for the page\u0026#39;s menu entry (instead of the `title` attribute)\r menuTitle = \u0026#34;\u0026#34;\r# The title of the page in menu will be prefixed by this HTML content\r pre = \u0026#34;\u0026#34;\r# The title of the page in menu will be postfixed by this HTML content\r post = \u0026#34;\u0026#34;\r# Set the page as a chapter, changing the way it\u0026#39;s displayed\r chapter = false\r# Hide a menu entry by setting this to true\r hidden = false\r# Display name of this page modifier. If set, it will be displayed in the footer.\r LastModifierDisplayName = \u0026#34;\u0026#34;\r# Email of this page modifier. If set with LastModifierDisplayName, it will be displayed in the footer\r LastModifierEmail = \u0026#34;\u0026#34;\r+++\rAdd icon to a menu entry In the page frontmatter, add a pre param to insert any HTML code before the menu label. The example below uses the Github icon.\n+++\rtitle = \u0026#34;Github repo\u0026#34;\rpre = \u0026#34;\u0026lt;i class=\u0026#39;fab fa-github\u0026#39;\u0026gt;\u0026lt;/i\u0026gt; \u0026#34;\r+++\rOrdering sibling menu/page entries Hugo provides a flexible way to handle order for your pages.\nThe simplest way is to set weight parameter to a number.\n+++\rtitle = \u0026#34;My page\u0026#34;\rweight = 5\r+++\rUsing a custom title for menu entries By default, Hugo-theme-learn will use a page's title attribute for the menu item (or linkTitle if defined).\nBut a page's title has to be descriptive on its own while the menu is a hierarchy. We've added the menuTitle parameter for that purpose:\nFor example (for a page named content/install/linux.md):\n+++\rtitle = \u0026#34;Install on Linux\u0026#34;\rmenuTitle = \u0026#34;Linux\u0026#34;\r+++\rHomepage To configure your home page, you basically have three choices:\n Create an _index.md document in content folder and fill the file with Markdown content Create an index.html file in the static folder and fill the file with HTML content Configure your server to automatically redirect home page to one your documentation page  "
},
{
	"uri": "http://echotrue.github.io/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Basics Discover what this Hugo theme is all about and the core-concepts behind it.\n"
},
{
	"uri": "http://echotrue.github.io/cont/",
	"title": "Content",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Content Find out how to create and organize your content quickly and intuitively.\n"
},
{
	"uri": "http://echotrue.github.io/cont/archetypes/",
	"title": "Archetypes",
	"tags": [],
	"description": "",
	"content": "Using the command: hugo new [relative new content path], you can start a content file with the date and title automatically set. While this is a welcome feature, active writers need more : archetypes.\nIt is pre-configured skeleton pages with default front matter. Please refer to the documentation for types of page to understand the differences.\nChapter To create a Chapter page, run the following commands\nhugo new --kind chapter \u0026lt;name\u0026gt;/_index.md\rIt will create a page with predefined Front-Matter:\n+++\rtitle = \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34;\rdate = {{ .Date }}\rweight = 5\rchapter = true\rpre = \u0026#34;\u0026lt;b\u0026gt;X. \u0026lt;/b\u0026gt;\u0026#34;\r+++\r### Chapter X\r\r# Some Chapter title\rLorem Ipsum.\rDefault To create a default page, run either one of the following commands\n# Either\rhugo new \u0026lt;chapter\u0026gt;/\u0026lt;name\u0026gt;/_index.md\r# Or\rhugo new \u0026lt;chapter\u0026gt;/\u0026lt;name\u0026gt;.md\rIt will create a page with predefined Front-Matter:\n+++\rtitle = \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34;\rdate = {{ .Date }}\rweight = 5\r+++\rLorem Ipsum.\r"
},
{
	"uri": "http://echotrue.github.io/basics/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": "Thanks to the simplicity of Hugo, this page is as empty as this theme needs requirements.\nJust download latest version of Hugo binary (\u0026gt; 0.25) for your OS (Windows, Linux, Mac) : it's that simple.\n"
},
{
	"uri": "http://echotrue.github.io/cont/markdown/",
	"title": "Markdown syntax",
	"tags": [],
	"description": "",
	"content": "\rThis page is a shameful copy of the great Grav original page. Only difference is information about image customization (resizing, add CSS classes\u0026hellip;)\n\rLet's face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\nMarkdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.\nSome of the key benefits are:\n Markdown is simple to learn, with minimal extra characters so it's also quicker to write content. Less chance of errors when writing in markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use!  John Gruber, the author of Markdown, puts it like this:\n The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. \u0026ndash; John Gruber\n Grav ships with built-in support for Markdown and Markdown Extra. You must enable Markdown Extra in your system.yaml configuration file\nWithout further delay, let us go over the main elements of Markdown and what the resulting HTML looks like:\nBookmark this page for easy future reference!\n\rHeadings Headings from h1 through h6 are constructed with a # for each level:\n# h1 Heading\r## h2 Heading\r### h3 Heading\r#### h4 Heading\r##### h5 Heading\r###### h6 Heading\rRenders to:\nh1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading HTML:\n\u0026lt;h1\u0026gt;h1 Heading\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;h2 Heading\u0026lt;/h2\u0026gt;\r\u0026lt;h3\u0026gt;h3 Heading\u0026lt;/h3\u0026gt;\r\u0026lt;h4\u0026gt;h4 Heading\u0026lt;/h4\u0026gt;\r\u0026lt;h5\u0026gt;h5 Heading\u0026lt;/h5\u0026gt;\r\u0026lt;h6\u0026gt;h6 Heading\u0026lt;/h6\u0026gt;\rComments Comments should be HTML compatible\n\u0026lt;!--This is a comment\r--\u0026gt;\rComment below should NOT be seen:\nHorizontal Rules The HTML \u0026lt;hr\u0026gt; element is for creating a \u0026ldquo;thematic break\u0026rdquo; between paragraph-level elements. In markdown, you can create a \u0026lt;hr\u0026gt; with any of the following:\n ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks  renders to:\n Body Copy Body copy written as normal, plain text will be wrapped with \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; tags in the rendered HTML.\nSo this body copy:\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\rrenders to this HTML:\n\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u0026lt;/p\u0026gt;\rEmphasis Bold For emphasizing a snippet of text with a heavier font-weight.\nThe following snippet of text is rendered as bold text.\n**rendered as bold text**\rrenders to:\nrendered as bold text\nand this HTML\n\u0026lt;strong\u0026gt;rendered as bold text\u0026lt;/strong\u0026gt;\rItalics For emphasizing a snippet of text with italics.\nThe following snippet of text is rendered as italicized text.\n_rendered as italicized text_\rrenders to:\nrendered as italicized text\nand this HTML:\n\u0026lt;em\u0026gt;rendered as italicized text\u0026lt;/em\u0026gt;\rStrikethrough In GFM (GitHub flavored Markdown) you can do strikethroughs.\n~~Strike through this text.~~\rWhich renders to:\nStrike through this text.\nHTML:\n\u0026lt;del\u0026gt;Strike through this text.\u0026lt;/del\u0026gt;\rBlockquotes For quoting blocks of content from another source within your document.\nAdd \u0026gt; before any text you want to quote.\n\u0026gt; **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\rRenders to:\n Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n and this HTML:\n\u0026lt;blockquote\u0026gt;\r\u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Fusion Drive\u0026lt;/strong\u0026gt; combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\u0026lt;/p\u0026gt;\r\u0026lt;/blockquote\u0026gt;\rBlockquotes can also be nested:\n\u0026gt; Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\r\u0026gt;\r\u0026gt; \u0026gt; Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\r\u0026gt;\r\u0026gt; Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus.\rRenders to:\n Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus.\n Notices The old mechanism for notices overriding the block quote syntax (\u0026gt;\u0026gt;\u0026gt;) has been deprecated. Notices are now handled via a dedicated plugin called Markdown Notices\n\rLists Unordered A list of items in which the order of the items does not explicitly matter.\nYou may use any of the following symbols to denote bullets for each list item:\n* valid bullet\r- valid bullet\r+ valid bullet\rFor example\n+ Lorem ipsum dolor sit amet\r+ Consectetur adipiscing elit\r+ Integer molestie lorem at massa\r+ Facilisis in pretium nisl aliquet\r+ Nulla volutpat aliquam velit\r- Phasellus iaculis neque\r- Purus sodales ultricies\r- Vestibulum laoreet porttitor sem\r- Ac tristique libero volutpat at\r+ Faucibus porta lacus fringilla vel\r+ Aenean sit amet erat nunc\r+ Eget porttitor lorem\rRenders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit  Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at   Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML\n\u0026lt;ul\u0026gt;\r\u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Nulla volutpat aliquam velit\r\u0026lt;ul\u0026gt;\r\u0026lt;li\u0026gt;Phasellus iaculis neque\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Purus sodales ultricies\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Vestibulum laoreet porttitor sem\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Ac tristique libero volutpat at\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\rOrdered A list of items in which the order of items does explicitly matter.\n1. Lorem ipsum dolor sit amet\r4. Consectetur adipiscing elit\r2. Integer molestie lorem at massa\r8. Facilisis in pretium nisl aliquet\r4. Nulla volutpat aliquam velit\r99. Faucibus porta lacus fringilla vel\r21. Aenean sit amet erat nunc\r6. Eget porttitor lorem\rRenders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML:\n\u0026lt;ol\u0026gt;\r\u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Nulla volutpat aliquam velit\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt;\r\u0026lt;/ol\u0026gt;\rTIP: If you just use 1. for each number, Markdown will automatically number each item. For example:\n1. Lorem ipsum dolor sit amet\r1. Consectetur adipiscing elit\r1. Integer molestie lorem at massa\r1. Facilisis in pretium nisl aliquet\r1. Nulla volutpat aliquam velit\r1. Faucibus porta lacus fringilla vel\r1. Aenean sit amet erat nunc\r1. Eget porttitor lorem\rRenders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  Code Inline code Wrap inline snippets of code with `.\nIn this example, `\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;` should be wrapped as **code**.\rRenders to:\nIn this example, \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; should be wrapped as code.\nHTML:\n\u0026lt;p\u0026gt;In this example, \u0026lt;code\u0026gt;\u0026amp;lt;section\u0026amp;gt;\u0026amp;lt;/section\u0026amp;gt;\u0026lt;/code\u0026gt; should be wrapped as \u0026lt;strong\u0026gt;code\u0026lt;/strong\u0026gt;.\u0026lt;/p\u0026gt;\rIndented code Or indent several lines of code by at least two spaces, as in:\n// Some comments\rline 1 of code\rline 2 of code\rline 3 of code\rRenders to:\n// Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r HTML:\n\u0026lt;pre\u0026gt;\r\u0026lt;code\u0026gt;\r// Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r\u0026lt;/code\u0026gt;\r\u0026lt;/pre\u0026gt;\rBlock code \u0026ldquo;fences\u0026rdquo; Use \u0026ldquo;fences\u0026rdquo; ``` to block in multiple lines of code.\nSample text here...\rHTML:\n\u0026lt;pre\u0026gt;\r\u0026lt;code\u0026gt;Sample text here...\u0026lt;/code\u0026gt;\r\u0026lt;/pre\u0026gt;\rSyntax highlighting GFM, or \u0026ldquo;GitHub Flavored Markdown\u0026rdquo; also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code \u0026ldquo;fence\u0026rdquo;, ```js, and syntax highlighting will automatically be applied in the rendered HTML.\nSee Code Highlighting for additional documentation.\nFor example, to apply syntax highlighting to JavaScript code:\n```js\rgrunt.initConfig({\rassemble: {\roptions: {\rassets: \u0026#39;docs/assets\u0026#39;,\rdata: \u0026#39;src/data/*.{json,yml}\u0026#39;,\rhelpers: \u0026#39;src/custom-helpers.js\u0026#39;,\rpartials: [\u0026#39;src/partials/**/*.{hbs,md}\u0026#39;]\r},\rpages: {\roptions: {\rlayout: \u0026#39;default.hbs\u0026#39;\r},\rfiles: {\r\u0026#39;./\u0026#39;: [\u0026#39;src/templates/pages/index.hbs\u0026#39;]\r}\r}\r}\r};\r```\rRenders to:\ngrunt.initConfig({\rassemble: {\roptions: {\rassets: \u0026#39;docs/assets\u0026#39;,\rdata: \u0026#39;src/data/*.{json,yml}\u0026#39;,\rhelpers: \u0026#39;src/custom-helpers.js\u0026#39;,\rpartials: [\u0026#39;src/partials/**/*.{hbs,md}\u0026#39;]\r},\rpages: {\roptions: {\rlayout: \u0026#39;default.hbs\u0026#39;\r},\rfiles: {\r\u0026#39;./\u0026#39;: [\u0026#39;src/templates/pages/index.hbs\u0026#39;]\r}\r}\r}\r};\rTables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n| Option | Description |\r| ------ | ----------- |\r| data | path to data files to supply the data that will be passed into templates. |\r| engine | engine to be used for processing templates. Handlebars is the default. |\r| ext | extension to be used for dest files. |\rRenders to:\n   Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    And this HTML:\n\u0026lt;table\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;Option\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;Description\u0026lt;/th\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;data\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;path to data files to supply the data that will be passed into templates.\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;engine\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;engine to be used for processing templates. Handlebars is the default.\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;ext\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;extension to be used for dest files.\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/table\u0026gt;\rRight aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column.\n| Option | Description |\r| ------:| -----------:|\r| data | path to data files to supply the data that will be passed into templates. |\r| engine | engine to be used for processing templates. Handlebars is the default. |\r| ext | extension to be used for dest files. |\r   Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    Links Basic link [Assemble](http://assemble.io)\rRenders to (hover over the link, there is no tooltip):\nAssemble\nHTML:\n\u0026lt;a href=\u0026#34;http://assemble.io\u0026#34;\u0026gt;Assemble\u0026lt;/a\u0026gt;\rAdd a tooltip [Upstage](https://github.com/upstage/ \u0026#34;Visit Upstage!\u0026#34;)\rRenders to (hover over the link, there should be a tooltip):\nUpstage\nHTML:\n\u0026lt;a href=\u0026#34;https://github.com/upstage/\u0026#34; title=\u0026#34;Visit Upstage!\u0026#34;\u0026gt;Upstage\u0026lt;/a\u0026gt;\rNamed Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\n# Table of Contents\r* [Chapter 1](#chapter-1)\r* [Chapter 2](#chapter-2)\r* [Chapter 3](#chapter-3)\rwill jump to these sections:\n## Chapter 1 \u0026lt;a id=\u0026#34;chapter-1\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\rContent for chapter one.\r## Chapter 2 \u0026lt;a id=\u0026#34;chapter-2\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\rContent for chapter one.\r## Chapter 3 \u0026lt;a id=\u0026#34;chapter-3\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\rContent for chapter one.\rNOTE that specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works.\nImages Images have a similar syntax to links but include a preceding exclamation point.\n![Minion](https://octodex.github.com/images/minion.png)\ror\n![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \u0026#34;The Stormtroopocat\u0026#34;)\rLike links, Images also have a footnote style syntax\nAlternative usage : note images ![Alt text][id]\rWith a reference later in the document defining the URL location:\n[id]: https://octodex.github.com/images/dojocat.jpg \u0026quot;The Dojocat\u0026quot;\r Resizing image Add HTTP parameters width and/or height to the link image to resize the image. Values are CSS values (default is auto).\n![Minion](https://octodex.github.com/images/minion.png?width=20pc)\r![Minion](https://octodex.github.com/images/minion.png?height=50px)\r![Minion](https://octodex.github.com/images/minion.png?height=50px\u0026amp;width=300px)\rAdd CSS classes Add a HTTP classes parameter to the link image to add CSS classes. shadowand border are available but you could define other ones.\n![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=shadow)\r![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=border)\r![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=border,shadow)\rLightbox Add a HTTP featherlight parameter to the link image to disable lightbox. By default lightbox is enabled using the featherlight.js plugin. You can disable this by defining featherlight to false.\n![Minion](https://octodex.github.com/images/minion.png?featherlight=false)\r"
},
{
	"uri": "http://echotrue.github.io/shortcodes/",
	"title": "Shortcodes",
	"tags": [],
	"description": "",
	"content": "Hugo uses Markdown for its simple content format. However, there are a lot of things that Markdown doesn’t support well. You could use pure HTML to expand possibilities.\nBut this happens to be a bad idea. Everyone uses Markdown because it's pure and simple to read even non-rendered. You should avoid HTML to keep it as simple as possible.\nTo avoid this limitations, Hugo created shortcodes. A shortcode is a simple snippet inside a page.\nHugo-theme-learn provides multiple shortcodes on top of existing ones.\n\rAttachments\r\rThe Attachments shortcode displays a list of files attached to a page.\n\rButton\r\rNice buttons on your page.\n\rChildren\r\rList the child pages of a page\n\rExpand\r\rDisplays an expandable/collapsible section of text on your page\n\rMermaid\r\rGeneration of diagram and flowchart from text in a similar manner as markdown\n\rNotice\r\rDisclaimers to help you structure your page\n\rSite param\r\rGet value of site params variables in your page.\n\r"
},
{
	"uri": "http://echotrue.github.io/basics/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "The following steps are here to help you initialize your new website. If you don't know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u0026lt;new_project\u0026gt;\rInstall the theme Install the Hugo-theme-learn theme by following this documentation\nThis theme's repository is: https://github.com/matcornic/hugo-theme-learn.git\nAlternatively, you can download the theme as .zip file and extract it in the themes directory\nBasic configuration When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. You can also add the [outputs] section to enable the search functionality.\n# Change the default theme to be use when building the site with Hugo\r theme = \u0026#34;hugo-theme-learn\u0026#34;\r# For search functionality\r [outputs]\rhome = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;]\rCreate your first chapter page Chapters are pages that contain other child pages. It has a special layout style and usually just contains a chapter name, the title and a brief abstract of the section.\n### Chapter 1\r# Basics\rDiscover what this Hugo theme is all about and the core concepts behind it.\rrenders as\nHugo-theme-learn provides archetypes to create skeletons for your website. Begin by creating your first chapter page with the following command\nhugo new --kind chapter basics/_index.md\rBy opening the given file, you should see the property chapter=true on top, meaning this page is a chapter.\nBy default all chapters and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata.\nCreate your first content pages Then, create content pages inside the previously created chapter. Here are two ways to create content in the chapter:\nhugo new basics/first-content.md\rhugo new basics/second-content/_index.md\rFeel free to edit thoses files by adding some sample content and replacing the title value in the beginning of the files.\nLaunching the website locally Launch by using the following command:\nhugo serve\rGo to http://localhost:1313\nYou should notice three things:\n You have a left-side Basics menu, containing two submenus with names equal to the title properties in the previously created files. The home page explains how to customize it by following the instructions. When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Neat!  Build the website When your site is ready to deploy, run the following command:\nhugo\rA public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server.\nThis website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use Github pages\n\r"
},
{
	"uri": "http://echotrue.github.io/cont/syntaxhighlight/",
	"title": "Code highlighting",
	"tags": [],
	"description": "",
	"content": "Learn theme uses highlight.js to provide code syntax highlighting.\nMarkdown syntax Wrap the code block with three backticks and the name of the language. Highlight will try to auto detect the language if one is not provided.\n```json\r[\r{\r\u0026#34;title\u0026#34;: \u0026#34;apples\u0026#34;,\r\u0026#34;count\u0026#34;: [12000, 20000],\r\u0026#34;description\u0026#34;: {\u0026#34;text\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;sensitive\u0026#34;: false}\r},\r{\r\u0026#34;title\u0026#34;: \u0026#34;oranges\u0026#34;,\r\u0026#34;count\u0026#34;: [17500, null],\r\u0026#34;description\u0026#34;: {\u0026#34;text\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;sensitive\u0026#34;: false}\r}\r]\r```\rRenders to:\n[\r{\r\u0026#34;title\u0026#34;: \u0026#34;apples\u0026#34;,\r\u0026#34;count\u0026#34;: [12000, 20000],\r\u0026#34;description\u0026#34;: {\u0026#34;text\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;sensitive\u0026#34;: false}\r},\r{\r\u0026#34;title\u0026#34;: \u0026#34;oranges\u0026#34;,\r\u0026#34;count\u0026#34;: [17500, null],\r\u0026#34;description\u0026#34;: {\u0026#34;text\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;sensitive\u0026#34;: false}\r}\r]\rSupported languages Learn theme ships with its own version of highlight.js to support offline browsing. The included package supports 38 common languages, as described on the highlight.js download page.\nIdentifying failed language detection Highlight will write a warning to the browser console if a requested language was not found. For example, the following code block references an imaginary language foo. An error will be output to the console on this page.\n```foo\rbar\r```\rCould not find the language 'foo', did you forget to load/include a language module?(anonymous) @ highlight.pack.js\rSupporting additional languages To support languages other than the 38 common languages included in the default highlight.js you will need to download your own version of highlight.js and add it to your site content.\nDownload custom highlight.js Visit https://highlightjs.org/download/ and select your desired language support. Note that more languages means greater package size.\nAdd custom highlight.js to static resources Inside the zip archive downloaded from highlight.js extract the file named highlight.pack.js. Move this file to the new location\nstatic/js/highlight.pack.js\rDo not replace the existing file at themes/hugo-theme-learn/static/js/highlight.pack.js.\nIncluding the file in the correct path will override the theme default highlight.pack.js and prevent issues caused in the future if the theme default file is updated.\nFurther usage information See https://highlightjs.org/usage/\n"
},
{
	"uri": "http://echotrue.github.io/basics/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Global site parameters On top of Hugo global configuration, Hugo-theme-learn lets you define the following parameters in your config.toml (here, values are default).\nNote that some of these parameters are explained in details in other sections of this documentation.\n[params]\r# Prefix URL to edit current page. Will display an \u0026#34;Edit this page\u0026#34; button on top right hand corner of every page.\r # Useful to give opportunity to people to create merge request for your doc.\r # See the config.toml file from this documentation site to have an example.\r editURL = \u0026#34;\u0026#34;\r# Author of the site, will be used in meta information\r author = \u0026#34;\u0026#34;\r# Description of the site, will be used in meta information\r description = \u0026#34;\u0026#34;\r# Shows a checkmark for visited pages on the menu\r showVisitedLinks = false\r# Disable search function. It will hide search bar\r disableSearch = false\r# Javascript and CSS cache are automatically busted when new version of site is generated.\r # Set this to true to disable this behavior (some proxies don\u0026#39;t handle well this optimization)\r disableAssetsBusting = false\r# Set this to true to disable copy-to-clipboard button for inline code.\r disableInlineCopyToClipBoard = false\r# A title for shortcuts in menu is set by default. Set this to true to disable it.\r disableShortcutsTitle = false\r# When using mulitlingual website, disable the switch language button.\r disableLanguageSwitchingButton = false\r# Hide breadcrumbs in the header and only show the current page title\r disableBreadcrumb = true\r# Hide Next and Previous page buttons normally displayed full height beside content\r disableNextPrev = true\r# Order sections in menu by \u0026#34;weight\u0026#34; or \u0026#34;title\u0026#34;. Default to \u0026#34;weight\u0026#34;\r ordersectionsby = \u0026#34;weight\u0026#34;\r# Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;.\r themeVariant = \u0026#34;\u0026#34;\r# Provide a list of custom css files to load relative from the `static/` folder in the site root.\r custom_css = [\u0026#34;css/foo.css\u0026#34;, \u0026#34;css/bar.css\u0026#34;]\rActivate search If not already present, add the follow lines in the same config.toml file.\n[outputs]\rhome = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;]\rLearn theme uses the last improvement available in hugo version 20+ to generate a json index file ready to be consumed by lunr.js javascript search engine.\n Hugo generate lunrjs index.json at the root of public folder. When you build the site with hugo server, hugo generates it internally and of course it doesn’t show up in the filesystem\n "
},
{
	"uri": "http://echotrue.github.io/cont/menushortcuts/",
	"title": "Menu extra shortcuts",
	"tags": [],
	"description": "",
	"content": "You can define additional menu entries or shortcuts in the navigation menu without any link to content.\nBasic configuration Edit the website configuration config.toml and add a [[menu.shortcuts]] entry for each link your want to add.\nExample from the current website:\n[[menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; Github repo\u0026quot;\ridentifier = \u0026quot;ds\u0026quot;\rurl = \u0026quot;https://github.com/matcornic/hugo-theme-learn\u0026quot;\rweight = 10\r[[menu.shortcuts]]\rname = \u0026quot;\u0026lt;i class='fas fa-camera'\u0026gt;\u0026lt;/i\u0026gt; Showcases\u0026quot;\rurl = \u0026quot;/showcase\u0026quot;\rweight = 11\r[[menu.shortcuts]]\rname = \u0026quot;\u0026lt;i class='fas fa-bookmark'\u0026gt;\u0026lt;/i\u0026gt; Hugo Documentation\u0026quot;\ridentifier = \u0026quot;hugodoc\u0026quot;\rurl = \u0026quot;https://gohugo.io/\u0026quot;\rweight = 20\r[[menu.shortcuts]]\rname = \u0026quot;\u0026lt;i class='fas fa-bullhorn'\u0026gt;\u0026lt;/i\u0026gt; Credits\u0026quot;\rurl = \u0026quot;/credits\u0026quot;\rweight = 30\r By default, shortcuts are preceded by a title. This title can be disabled by setting disableShortcutsTitle=true. However, if you want to keep the title but change its value, it can be overriden by changing your local i18n translation string configuration.\nFor example, in your local i18n/en.toml file, add the following content\n[Shortcuts-Title]\rother = \u0026quot;\u0026lt;Your value\u0026gt;\u0026quot;\r Read more about hugo menu and hugo i18n translation strings\nConfiguration for Multilingual mode When using a multilingual website, you can set different menus for each language. In the config.toml file, prefix your menu configuration by Languages.\u0026lt;language-id\u0026gt;.\nExample from the current website:\n[Languages]\r[Languages.en]\rtitle = \u0026quot;Documentation for Hugo Learn Theme\u0026quot;\rweight = 1\rlanguageName = \u0026quot;English\u0026quot;\r[[Languages.en.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; Github repo\u0026quot;\ridentifier = \u0026quot;ds\u0026quot;\rurl = \u0026quot;https://github.com/matcornic/hugo-theme-learn\u0026quot;\rweight = 10\r[[Languages.en.menu.shortcuts]]\rname = \u0026quot;\u0026lt;i class='fas fa-camera'\u0026gt;\u0026lt;/i\u0026gt; Showcases\u0026quot;\rurl = \u0026quot;/showcase\u0026quot;\rweight = 11\r[[Languages.en.menu.shortcuts]]\rname = \u0026quot;\u0026lt;i class='fas fa-bookmark'\u0026gt;\u0026lt;/i\u0026gt; Hugo Documentation\u0026quot;\ridentifier = \u0026quot;hugodoc\u0026quot;\rurl = \u0026quot;https://gohugo.io/\u0026quot;\rweight = 20\r[[Languages.en.menu.shortcuts]]\rname = \u0026quot;\u0026lt;i class='fas fa-bullhorn'\u0026gt;\u0026lt;/i\u0026gt; Credits\u0026quot;\rurl = \u0026quot;/credits\u0026quot;\rweight = 30\r[Languages.fr]\rtitle = \u0026quot;Documentation du thème Hugo Learn\u0026quot;\rweight = 2\rlanguageName = \u0026quot;Français\u0026quot;\r[[Languages.fr.menu.shortcuts]]\rname = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; Repo Github\u0026quot;\ridentifier = \u0026quot;ds\u0026quot;\rurl = \u0026quot;https://github.com/matcornic/hugo-theme-learn\u0026quot;\rweight = 10\r[[Languages.fr.menu.shortcuts]]\rname = \u0026quot;\u0026lt;i class='fas fa-camera'\u0026gt;\u0026lt;/i\u0026gt; Vitrine\u0026quot;\rurl = \u0026quot;/showcase\u0026quot;\rweight = 11\r[[Languages.fr.menu.shortcuts]]\rname = \u0026quot;\u0026lt;i class='fas fa-bookmark'\u0026gt;\u0026lt;/i\u0026gt; Documentation Hugo\u0026quot;\ridentifier = \u0026quot;hugodoc\u0026quot;\rurl = \u0026quot;https://gohugo.io/\u0026quot;\rweight = 20\r[[Languages.fr.menu.shortcuts]]\rname = \u0026quot;\u0026lt;i class='fas fa-bullhorn'\u0026gt;\u0026lt;/i\u0026gt; Crédits\u0026quot;\rurl = \u0026quot;/credits\u0026quot;\rweight = 30\r Read more about hugo menu and hugo multilingual menus\n"
},
{
	"uri": "http://echotrue.github.io/basics/style-customization/",
	"title": "Style customization",
	"tags": [],
	"description": "",
	"content": "Hugo-theme-learn has been built to be as configurable as possible by defining multiple partials\nIn themes/hugo-theme-learn/layouts/partials/, you will find all the partials defined for this theme. If you need to overwrite something, don't change the code directly. Instead follow this page. You'd create a new partial in the layouts/partials folder of your local project. This partial will have the priority.\nThis theme defines the following partials :\n header: the header of the content page (contains the breadcrumbs). Not meant to be overwritten custom-header: custom headers in page. Meant to be overwritten when adding CSS imports. Don't forget to include style HTML tag directive in your file footer: the footer of the content page (contains the arrows). Not meant to be overwritten custom-footer: custom footer in page. Meant to be overwritten when adding Javacript. Don't forget to include javascript HTML tag directive in your file favicon: the favicon logo: the logo, on top left hand corner. meta: HTML meta tags, if you want to change default behavior menu: left menu. Not meant to be overwritten menu-footer: footer of the the left menu search: search box toc: table of contents  Change the logo Create a new file in layouts/partials/ named logo.html. Then write any HTML you want. You could use an img HTML tag and reference an image created under the static folder, or you could paste a SVG definition !\nThe size of the logo will adapt automatically\n\rChange the favicon If your favicon is a png, just drop off your image in your local static/images/ folder and name it favicon.png\nIf you need to change this default behavior, create a new file in layouts/partials/ named favicon.html. Then write something like this:\n\u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; href=\u0026#34;/images/favicon.png\u0026#34; type=\u0026#34;image/x-icon\u0026#34; /\u0026gt;\rChange default colors Hugo Learn theme let you choose between 3 native color scheme variants, but feel free to add one yourself ! Default color scheme is based on Grav Learn Theme.\nRed variant [params]\r# Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;.\r themeVariant = \u0026#34;red\u0026#34;\rBlue variant [params]\r# Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;.\r themeVariant = \u0026#34;blue\u0026#34;\rGreen variant [params]\r# Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;.\r themeVariant = \u0026#34;green\u0026#34;\r\u0026lsquo;Yours‘ variant First, create a new CSS file in your local static/css folder prefixed by theme (e.g. with mine theme static/css/theme-mine.css). Copy the following content and modify colors in CSS variables.\n:root{\r--MAIN-TEXT-color:#323232; /* Color of text by default */\r--MAIN-TITLES-TEXT-color: #5e5e5e; /* Color of titles h2-h3-h4-h5 */\r--MAIN-LINK-color:#1C90F3; /* Color of links */\r--MAIN-LINK-HOVER-color:#167ad0; /* Color of hovered links */\r--MAIN-ANCHOR-color: #1C90F3; /* color of anchors on titles */\r--MENU-HEADER-BG-color:#1C90F3; /* Background color of menu header */\r--MENU-HEADER-BORDER-color:#33a1ff; /*Color of menu header border */ --MENU-SEARCH-BG-color:#167ad0; /* Search field background color (by default borders + icons) */\r--MENU-SEARCH-BOX-color: #33a1ff; /* Override search field border color */\r--MENU-SEARCH-BOX-ICONS-color: #a1d2fd; /* Override search field icons color */\r--MENU-SECTIONS-ACTIVE-BG-color:#20272b; /* Background color of the active section and its childs */\r--MENU-SECTIONS-BG-color:#252c31; /* Background color of other sections */\r--MENU-SECTIONS-LINK-color: #ccc; /* Color of links in menu */\r--MENU-SECTIONS-LINK-HOVER-color: #e6e6e6; /* Color of links in menu, when hovered */\r--MENU-SECTION-ACTIVE-CATEGORY-color: #777; /* Color of active category text */\r--MENU-SECTION-ACTIVE-CATEGORY-BG-color: #fff; /* Color of background for the active category (only) */\r--MENU-VISITED-color: #33a1ff; /* Color of \u0026#39;page visited\u0026#39; icons in menu */\r--MENU-SECTION-HR-color: #20272b; /* Color of \u0026lt;hr\u0026gt; separator in menu */\r}\rbody {\rcolor: var(--MAIN-TEXT-color) !important;\r}\rtextarea:focus, input[type=\u0026#34;email\u0026#34;]:focus, input[type=\u0026#34;number\u0026#34;]:focus, input[type=\u0026#34;password\u0026#34;]:focus, input[type=\u0026#34;search\u0026#34;]:focus, input[type=\u0026#34;tel\u0026#34;]:focus, input[type=\u0026#34;text\u0026#34;]:focus, input[type=\u0026#34;url\u0026#34;]:focus, input[type=\u0026#34;color\u0026#34;]:focus, input[type=\u0026#34;date\u0026#34;]:focus, input[type=\u0026#34;datetime\u0026#34;]:focus, input[type=\u0026#34;datetime-local\u0026#34;]:focus, input[type=\u0026#34;month\u0026#34;]:focus, input[type=\u0026#34;time\u0026#34;]:focus, input[type=\u0026#34;week\u0026#34;]:focus, select[multiple=multiple]:focus {\rborder-color: none;\rbox-shadow: none;\r}\rh2, h3, h4, h5 {\rcolor: var(--MAIN-TITLES-TEXT-color) !important;\r}\ra {\rcolor: var(--MAIN-LINK-color);\r}\r.anchor {\rcolor: var(--MAIN-ANCHOR-color);\r}\ra:hover {\rcolor: var(--MAIN-LINK-HOVER-color);\r}\r#sidebar ul li.visited \u0026gt; a .read-icon {\rcolor: var(--MENU-VISITED-color);\r}\r#body a.highlight:after {\rdisplay: block;\rcontent: \u0026#34;\u0026#34;;\rheight: 1px;\rwidth: 0%;\r-webkit-transition: width 0.5s ease;\r-moz-transition: width 0.5s ease;\r-ms-transition: width 0.5s ease;\rtransition: width 0.5s ease;\rbackground-color: var(--MAIN-LINK-HOVER-color);\r}\r#sidebar {\rbackground-color: var(--MENU-SECTIONS-BG-color);\r}\r#sidebar #header-wrapper {\rbackground: var(--MENU-HEADER-BG-color);\rcolor: var(--MENU-SEARCH-BOX-color);\rborder-color: var(--MENU-HEADER-BORDER-color);\r}\r#sidebar .searchbox {\rborder-color: var(--MENU-SEARCH-BOX-color);\rbackground: var(--MENU-SEARCH-BG-color);\r}\r#sidebar ul.topics \u0026gt; li.parent, #sidebar ul.topics \u0026gt; li.active {\rbackground: var(--MENU-SECTIONS-ACTIVE-BG-color);\r}\r#sidebar .searchbox * {\rcolor: var(--MENU-SEARCH-BOX-ICONS-color);\r}\r#sidebar a {\rcolor: var(--MENU-SECTIONS-LINK-color);\r}\r#sidebar a:hover {\rcolor: var(--MENU-SECTIONS-LINK-HOVER-color);\r}\r#sidebar ul li.active \u0026gt; a {\rbackground: var(--MENU-SECTION-ACTIVE-CATEGORY-BG-color);\rcolor: var(--MENU-SECTION-ACTIVE-CATEGORY-color) !important;\r}\r#sidebar hr {\rborder-color: var(--MENU-SECTION-HR-color);\r}\rThen, set the themeVariant value with the name of your custom theme file. That's it !\n[params]\r# Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;.\r themeVariant = \u0026#34;mine\u0026#34;\r"
},
{
	"uri": "http://echotrue.github.io/cont/icons/",
	"title": "Icons and logos",
	"tags": [],
	"description": "",
	"content": "The Learn theme for Hugo loads the Font Awesome library, allowing you to easily display any icon or logo available in the Font Awesome free collection.\nFinding an icon Browse through the available icons in the Font Awesome Gallery. Notice that the free filter is enabled, as only the free icons are available by default.\nOnce on the Font Awesome page for a specific icon, for example the page for the heart, copy the HTML reference and paste into the markdown content.\nThe HTML to include the heart icon is:\n\u0026lt;i class=\u0026quot;fas fa-heart\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\rIncluding in markdown Paste the \u0026lt;i\u0026gt; HTML into markup and Font Awesome will load the relevant icon.\nBuilt with \u0026lt;i class=\u0026quot;fas fa-heart\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; from Grav and Hugo\rWhich appears as\nBuilt with from Grav and Hugo\nCustomising icons Font Awesome provides many ways to modify the icon\n Change colour (by default the icon will inherit the parent colour) Increase or decrease size Rotate Combine with other icons  Check the full documentation on web fonts with CSS for more.\n"
},
{
	"uri": "http://echotrue.github.io/cont/i18n/",
	"title": "Multilingual and i18n",
	"tags": [],
	"description": "",
	"content": "Learn theme is fully compatible with Hugo multilingual mode.\nIt provides:\n Translation strings for default values (English and French). Feel free to contribute ! Automatic menu generation from multilingual content In-browser language switching  Basic configuration After learning how Hugo handle multilingual websites, define your languages in your config.toml file.\nFor example with current French and English website.\n# English is the default language\r defaultContentLanguage = \u0026#34;en\u0026#34;\r# Force to have /en/my-page and /fr/my-page routes, even for default language.\r defaultContentLanguageInSubdir= true\r[Languages]\r[Languages.en]\rtitle = \u0026#34;Documentation for Hugo Learn Theme\u0026#34;\rweight = 1\rlanguageName = \u0026#34;English\u0026#34;\r[Languages.fr]\rtitle = \u0026#34;Documentation du thème Hugo Learn\u0026#34;\rweight = 2\rlanguageName = \u0026#34;Français\u0026#34;\rThen, for each new page, append the id of the language to the file.\n Single file my-page.md is split in two files:  in English: my-page.en.md in French: my-page.fr.md   Single file _index.md is split in two files:  in English: _index.en.md in French: _index.fr.md    Be aware that only translated pages are displayed in menu. It's not replaced with default language content.\n\rUse slug Front Matter parameter to translate urls too.\n\rOverwrite translation strings Translations strings are used for common default values used in the theme (Edit this page button, Search placeholder and so on). Translations are available in french and english but you may use another language or want to override default values.\nTo override these values, create a new file in your local i18n folder i18n/\u0026lt;idlanguage\u0026gt;.toml and inspire yourself from the theme themes/hugo-theme-learn/i18n/en.toml\nBy the way, as these translations could be used by other people, please take the time to propose a translation by making a PR to the theme !\nDisable language switching Switching the language in the browser is a great feature, but for some reasons you may want to disable it.\nJust set disableLanguageSwitchingButton=true in your config.toml\n[params]\r# When using mulitlingual website, disable the switch language button.\r disableLanguageSwitchingButton = true\r"
},
{
	"uri": "http://echotrue.github.io/cont/tags/",
	"title": "Tags",
	"tags": ["documentation", "tutorial"],
	"description": "",
	"content": "Learn theme support one default taxonomy of gohugo: the tag feature.\nConfiguration Just add tags to any page:\n---\rdate: 2018-11-29T08:41:44+01:00\rtitle: Theme tutorial\rweight: 15\rtags: [\u0026#34;tutorial\u0026#34;, \u0026#34;theme\u0026#34;] ---\rBehavior The tags are displayed at the top of the page, in their insertion order.\nEach tag is a link to a Taxonomy page displaying all the articles with the given tag.\nList all the tags In the config.toml file you can add a shortcut to display all the tags\n[[menu.shortcuts]]\rname = \u0026#34;\u0026lt;i class=\u0026#39;fas fa-tags\u0026#39;\u0026gt;\u0026lt;/i\u0026gt; Tags\u0026#34;\rurl = \u0026#34;/tags\u0026#34;\rweight = 30\r"
},
{
	"uri": "http://echotrue.github.io/",
	"title": "Axlrose",
	"tags": [],
	"description": "",
	"content": "Hugo learn theme Hugo-theme-learn is a theme for Hugo, a fast and modern static website engine written in Go. Where Hugo is often used for blogs, this multilingual-ready theme is fully designed for documentation.\nThis theme is a partial porting of the Learn theme of Grav, a modern flat-file CMS written in PHP.\nLearn theme works with a page tree structure to organize content : All contents are pages, which belong to other pages. read more about this\n\rMain features  Automatic Search Multilingual mode Unlimited menu levels Automatic next/prev buttons to navigate through menu entries Image resizing, shadow\u0026hellip; Attachments files List child pages Mermaid diagram (flowchart, sequence, gantt) Customizable look and feel and themes variants Buttons, Tip/Note/Info/Warning boxes, Expand  Contribute to this documentation Feel free to update this content, just click the Edit this page link displayed on top right of each page, and pullrequest it\nYour modification will be deployed automatically when merged.\n\rDocumentation website This current documentation has been statically generated with Hugo with a simple command : hugo -t hugo-theme-learn \u0026ndash; source code is available here at GitHub\nAutomatically published and hosted thanks to Netlify. Read more about Automated HUGO deployments with Netlify\n\r"
},
{
	"uri": "http://echotrue.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/tags/go/",
	"title": "Go",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/categories/go/",
	"title": "Go",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/golang_post/lock/",
	"title": "Lock",
	"tags": ["Go", "lock"],
	"description": "",
	"content": "检测Go程序中按值传递的 locks "
},
{
	"uri": "http://echotrue.github.io/tags/lock/",
	"title": "lock",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/categories/lock/",
	"title": "lock",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/golang_post/make-and-new/",
	"title": "Golang make and new",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/tags/panic/",
	"title": "panic",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/categories/panic/",
	"title": "panic",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/golang_post/panic-and-recover/",
	"title": "Panic and Recover",
	"tags": ["Go", "panic"],
	"description": "",
	"content": "panic  Golang 中常见的错误处理方式是返回error给调用者。通常error使用场景是发生了逻辑错误。但是，如果是无法恢复的错误，可以选择使用panic。panic可以主动触发。也可以被动触发（例如：数组越界）。\n panic会停掉当前正在执行的程序，与os.Exit(-1)不同的是：panic会有序的撤退，它会先处理完当前goroutine已经defer的任务，然后再退出整个程序。\nfunc main() {\rvar user = os.Getenv(\u0026quot;USER_\u0026quot;)\rgo func() {\rdefer func() {\rfmt.Println(\u0026quot;defer 1\u0026quot;)\r}()\rif user == \u0026quot;\u0026quot;{\rpanic(\u0026quot;should set user env.\u0026quot;)\r}\r}()\rtime.Sleep(1*time.Second)\rfmt.Println(\u0026quot;get result\u0026quot;)\r}\r 上述代码输出：\ndefer 1\rpanic: should set user env.\rgoroutine 19 [running]:\rmain.main.func1(0x0, 0x0)\rD:/gopath/src/race_condition/index.go:16 +0x86\rcreated by main.main\rD:/gopath/src/race_condition/index.go:11 +0x59\rProcess finished with exit code 2\r说明panic坚守了自己的原则：执行且只执行当前goroutine的defer，defer的特点是LIFO，即后进先出。如果有多个defer的时候，会倒序执行\nrecover  有时候不希望因为panic导致整个进程终止，因此需要像其他语言捕获异常。在Golang中可以通过在当前goroutine的defer中使用recover来捕获panic。recover只在defer的函数中有效，如果不是在defer上下文中调用，recover会直接返回nil\n"
},
{
	"uri": "http://echotrue.github.io/golang_post/golang-select/",
	"title": "Golang Select",
	"tags": ["Go"],
	"description": "",
	"content": "什么是select select语句用于从多个发送/接收channel中进行选择的操作。 select语句将阻塞直到其中一个发送/接收操作准备就绪。如果有多个操作就绪，则随机选择其中一个操作。语法类似于switch，只是每个case语句被一个channel操作取代了。让我们深入研究一些代码，以便更好地理解\nfunc server1(ch chan string) {\rtime.Sleep(6 * time.Second)\rch \u0026lt;- \u0026quot;from server1\u0026quot;\r}\rfunc server2(ch chan string) {\rtime.Sleep(3 * time.Second)\rch \u0026lt;- \u0026quot;from server2\u0026quot;\r}\rfunc main() {\routput1 := make(chan string)\routput2 := make(chan string)\rgo server1(output1)\rgo server2(output2)\rselect {\rcase s1 := \u0026lt;-output1:\rfmt.Println(s1)\rcase s2 := \u0026lt;-output2:\rfmt.Println(s2)\r}\r}\r在上面的程序中，在第 8 行server1函数休眠 6 秒然后将文本从server1写入channel ch。第 12 行server2函数休眠 3 秒，然后从server2写入channel ch。\nmain函数在 20 和 21 行分别调用server1和server2。\n在第 22 行，select语句将阻塞直到其中一个case准备就绪。在上面的程序中，server1在 6 秒后写入output1 channel，而server2在 3 秒后写入output2 channel。因此 select 语句将阻塞 3 秒并等待server2写入。 3 秒后，程序将打印，\nfrom server2\r然后终止。\nselect的用途 将上述程序中的函数命名为server1和server2的原因是为了说明select的实际用途。\n让我们假设我们有一个关键任务的应用，我们需要尽快将输出返回给用户。该应用程序的数据库被复制并存储在世界各地的不同服务器中。假设函数server1和server2实际上与 2 个这样的服务器通信。每个服务器的响应时间取决于每个服务器的负载和网络延迟。我们将请求发送到两个服务器，然后使用select语句在相应的channel上等待响应。select会选择优先响应的服务器，其他响应被忽略。这样我们就可以向多个服务器发送相同的请求，并将最快的响应返回给用户:)。\n默认case 当其他case都没有准备就绪时，将会执行select语句中的默认case。这通常用于防止select语句阻塞。\nfunc process(ch chan string) {\rtime.Sleep(10500 * time.Millisecond)\rch \u0026lt;- \u0026quot;process successful\u0026quot;\r}\rfunc main() {\rch := make(chan string)\rgo process(ch)\rfor {\rtime.Sleep(1000 * time.Millisecond)\rselect {\rcase v := \u0026lt;-ch:\rfmt.Println(\u0026quot;received value: \u0026quot;, v)\rreturn\rdefault:\rfmt.Println(\u0026quot;no value received\u0026quot;)\r}\r}\r}\r在上面的程序中，在第 8 行process函数休眠 10500 毫秒（10.5 秒），然后将process successful写入ch channel。该函数在第 15 行被并发调用。\n在并发调用process Goroutine之后，main Goroutine中启动了无限循环。无限循环在每次迭代开始期间休眠 1000 毫秒（1 秒），并执行select操作。在前 10500 毫秒期间，select语句的第一种情况即case v：= \u0026lt;-ch：将不会准备就绪，因为process Goroutine仅在 10500 毫秒后才写入ch channel。因此，在此期间将执行defualt分支，程序将会打印 10 次no value received。\n在 10.5 秒之后，process Goroutine将process successful写入ch。 现在将执行select语句的第一种情况，程序将打印received value: process successful然后程序终止。该程序将输出，\nno value received\rno value received\rno value received\rno value received\rno value received\rno value received\rno value received\rno value received\rno value received\rno value received\rreceived value: process successful\r死锁和默认case func main() {\rch := make(chan string)\rselect {\rcase \u0026lt;-ch:\r}\r}\r在上面的程序中，我们在第一行创建了一个channel ch。我们尝试从选择的这个channel读取。而这个select语句将一直阻塞，因为没有其他Goroutine写入此channel，因此将导致死锁。该程序将在运行时产生panic同时打印，\nfatal error: all goroutines are asleep - deadlock!\rgoroutine 1 [chan receive]:\rmain.main()\r/tmp/sandbox416567824/main.go:6 +0x80\r如果存在默认case，则不会发生此死锁，因为在没有其他case准备就绪时将执行默认case。上面的程序可以重写。\nfunc main() {\rch := make(chan string)\rselect {\rcase \u0026lt;-ch:\rdefault:\rfmt.Println(\u0026quot;default case executed\u0026quot;)\r}\r}\r输出，\ndefault case executed\r类似地，当select只有一个nil channel，也会执行默认case。\nfunc main() {\rvar ch chan string\rselect {\rcase v := \u0026lt;-ch:\rfmt.Println(\u0026quot;received value\u0026quot;, v)\rdefault:\rfmt.Println(\u0026quot;default case executed\u0026quot;)\r}\r}\r在上面的程序中，ch是nil，我们试图用select从ch中读取。如果没有默认case，则select将一直被阻塞并导致死锁。由于我们在select中有一个默认的case，它将被执行并且程序将打印，\ndefault case executed\rselect的随机性 当select语句中的多个case准备就绪时，将会随机挑选一个执行。\nfunc server1(ch chan string) {\rch \u0026lt;- \u0026quot;from server1\u0026quot;\r}\rfunc server2(ch chan string) {\rch \u0026lt;- \u0026quot;from server2\u0026quot;\r}\rfunc main() {\routput1 := make(chan string)\routput2 := make(chan string)\rgo server1(output1)\rgo server2(output2)\rtime.Sleep(1 * time.Second)\rselect {\rcase s1 := \u0026lt;-output1:\rfmt.Println(s1)\rcase s2 := \u0026lt;-output2:\rfmt.Println(s2)\r}\r}\r在上面的程序中，server1和server2 协程在第 18 和 19 行分别被调用，然后main协程休眠 1 秒。当运行到select语句时，server1已将from server1写入output1，server2已将from server2写入output2，因此select语句中的两种情况都准备就绪。如果多次运行此程序，将会随机输出from server1或from server2。\n空select func main() {\rselect {}\r}\r你认为上面的程序将会输出什么？\n我们知道select语句将被阻塞，直到执行其中一个case。在这种情况下，select语句没有任何case，因此它将一直阻塞导致死锁。这个程序将会产生panic，并输出，\nfatal error: all goroutines are asleep - deadlock!\rgoroutine 1 [select (no cases)]:\rmain.main()\r/tmp/sandbox299546399/main.go:4 +0x20\r"
},
{
	"uri": "http://echotrue.github.io/tags/documentation/",
	"title": "documentation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/tags/tutorial/",
	"title": "tutorial",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/golang_post/addressable/",
	"title": "Addressable and Unaddressable-Value",
	"tags": ["Go"],
	"description": "",
	"content": "Addressable "
},
{
	"uri": "http://echotrue.github.io/tags/array/",
	"title": "array",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/shortcodes/attachments/",
	"title": "Attachments",
	"tags": [],
	"description": "The Attachments shortcode displays a list of files attached to a page.",
	"content": "The Attachments shortcode displays a list of files attached to a page.\n\r\rAttachments\r\r\rBachGavotteShort.mp3\r\r(357 ko)\r\r\rCarroll_AliceAuPaysDesMerveilles.pdf\r\r(175 ko)\r\r\radivorciarsetoca00cape.pdf\r\r(361 ko)\r\r\rhugo.png\r\r(17 ko)\r\r\rmovieselectricsheep-flock-244-32500-2.mp4\r\r(340 ko)\r\r\r\rUsage The shortcurt lists files found in a specific folder. Currently, it support two implementations for pages\n  If your page is a markdown file, attachements must be place in a folder named like your page and ending with .files.\n  content  _index.md page.files  attachment.pdf   page.md       If your page is a folder, attachements must be place in a nested \u0026lsquo;files\u0026rsquo; folder.\n  content  _index.md page  index.md files  attachment.pdf           Be aware that if you use a multilingual website, you will need to have as many folders as languages.\nThat's all !\nParameters    Parameter Default Description     title \u0026ldquo;Attachments\u0026rdquo; List's title   style \u0026quot;\u0026rdquo; Choose between \u0026ldquo;orange\u0026rdquo;, \u0026ldquo;grey\u0026rdquo;, \u0026ldquo;blue\u0026rdquo; and \u0026ldquo;green\u0026rdquo; for nice style   pattern \u0026ldquo;.*\u0026rdquo; A regular expressions, used to filter the attachments by file name. The pattern parameter value must be regular expressions.    For example:\n To match a file suffix of \u0026lsquo;jpg\u0026rsquo;, use *.jpg (not *.jpg). To match file names ending in \u0026lsquo;jpg\u0026rsquo; or \u0026lsquo;png\u0026rsquo;, use .*(jpg|png)  Examples List of attachments ending in pdf or mp4 {{%attachments title=\u0026quot;Related files\u0026quot; pattern=\u0026quot;.*(pdf|mp4)\u0026quot;/%}}\r renders as\n\r\rRelated files\r\r\rCarroll_AliceAuPaysDesMerveilles.pdf\r\r(175 ko)\r\r\radivorciarsetoca00cape.pdf\r\r(361 ko)\r\r\rmovieselectricsheep-flock-244-32500-2.mp4\r\r(340 ko)\r\r\r\rColored styled box {{%attachments style=\u0026quot;orange\u0026quot; /%}}\r renders as\n\r\rAttachments\r\r\rBachGavotteShort.mp3\r\r(357 ko)\r\r\rCarroll_AliceAuPaysDesMerveilles.pdf\r\r(175 ko)\r\r\radivorciarsetoca00cape.pdf\r\r(361 ko)\r\r\rhugo.png\r\r(17 ko)\r\r\rmovieselectricsheep-flock-244-32500-2.mp4\r\r(340 ko)\r\r\r\r{{%attachments style=\u0026quot;grey\u0026quot; /%}}\r renders as\n\r\rAttachments\r\r\rBachGavotteShort.mp3\r\r(357 ko)\r\r\rCarroll_AliceAuPaysDesMerveilles.pdf\r\r(175 ko)\r\r\radivorciarsetoca00cape.pdf\r\r(361 ko)\r\r\rhugo.png\r\r(17 ko)\r\r\rmovieselectricsheep-flock-244-32500-2.mp4\r\r(340 ko)\r\r\r\r{{%attachments style=\u0026quot;blue\u0026quot; /%}}\r renders as\n\r\rAttachments\r\r\rBachGavotteShort.mp3\r\r(357 ko)\r\r\rCarroll_AliceAuPaysDesMerveilles.pdf\r\r(175 ko)\r\r\radivorciarsetoca00cape.pdf\r\r(361 ko)\r\r\rhugo.png\r\r(17 ko)\r\r\rmovieselectricsheep-flock-244-32500-2.mp4\r\r(340 ko)\r\r\r\r{{%attachments style=\u0026quot;green\u0026quot; /%}}\r renders as\n\r\rAttachments\r\r\rBachGavotteShort.mp3\r\r(357 ko)\r\r\rCarroll_AliceAuPaysDesMerveilles.pdf\r\r(175 ko)\r\r\radivorciarsetoca00cape.pdf\r\r(361 ko)\r\r\rhugo.png\r\r(17 ko)\r\r\rmovieselectricsheep-flock-244-32500-2.mp4\r\r(340 ko)\r\r\r\r"
},
{
	"uri": "http://echotrue.github.io/golang_post/block-forever-in-go/",
	"title": "Block forever in go",
	"tags": ["Go"],
	"description": "",
	"content": "Golang中永久阻塞的不同方法 The current design of Go’s runtime assumes that the programmer is responsible for detecting when to terminate a goroutine and when to terminate the program. A program can be terminated in a normal way by calling os.Exit or by returning from the main() function. There are a lot of ways of blocking runtime forever, I will show all of them for better understanding of blocking in Go.\n1. Using sync.WaitGroup Wait blocks until the WaitGroup counter is zero.\npackage main\rimport \u0026quot;sync\u0026quot;\rfunc main() {\rvar wg sync.WaitGroup\rwg.Add(1)\rwg.Wait()\r}\r2. Empty select An empty select{} statement blocks indefinitely i.e. forever. It is similar and in practice equivalent to an empty for{} statement.\npackage main\rfunc main() {\rselect{}\r}\r3. Infinite loop The easiest way which will use 100% of CPU.\npackage main\rfunc main() {\rfor {}\r}\r4. Using sync.Mutex If the lock is already in use, the calling goroutine blocks until the mutex is available.\npackage main\rimport \u0026quot;sync\u0026quot;\rfunc main() {\rvar m sync.Mutex\rm.Lock()\rm.Lock()\r}\r5. Empty Channel Empty channels will block until there is something to receive.\npackage main\rfunc main() {\rc := make(chan struct{})\r\u0026lt;-c\r}\r6. Nil Channel Works for channels created without make.\npackage main\rfunc main() {\rvar c chan struct\r\u0026lt;-c\r}\rConclusion I have found 6 ways to block a Go program. It can be useful when you start multiple goroutines in a main() function and don’t want to terminate a whole program after that. But some of these examples are just for fun.\nIf you know another way - please share it in comments, I will add it here.\n"
},
{
	"uri": "http://echotrue.github.io/shortcodes/button/",
	"title": "Button",
	"tags": [],
	"description": "Nice buttons on your page.",
	"content": "A button is a just a clickable button with optional icon.\n{{% button href=\u0026quot;https://getgrav.org/\u0026quot; %}}Get Grav{{% /button %}}\r{{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; %}}Get Grav with icon{{% /button %}}\r{{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; icon-position=\u0026quot;right\u0026quot; %}}Get Grav with icon right{{% /button %}}\r\rGet Grav\r\r\rGet Grav with icon\r\rGet Grav with icon right\r\r\r"
},
{
	"uri": "http://echotrue.github.io/shortcodes/children/",
	"title": "Children",
	"tags": [],
	"description": "List the child pages of a page",
	"content": "Use the children shortcode to list the child pages of a page and the further descendants (children's children). By default, the shortcode displays links to the child pages.\nUsage    Parameter Default Description     page current Specify the page name (section name) to display children for   style \u0026ldquo;li\u0026rdquo; Choose the style used to display descendants. It could be any HTML tag name   showhidden \u0026ldquo;false\u0026rdquo; When true, child pages hidden from the menu will be displayed   description \u0026ldquo;false\u0026rdquo; Allows you to include a short text under each page in the list.when no description exists for the page, children shortcode takes the first 70 words of your content. read more info about summaries on gohugo.io   depth 1 Enter a number to specify the depth of descendants to display. For example, if the value is 2, the shortcode will display 2 levels of child pages. Tips: set 999 to get all descendants   sort none Sort Children ByWeight- to sort on menu orderName- to sort alphabetically on menu labelIdentifier- to sort alphabetically on identifier set in frontmatterURL- URL    Demo {{% children %}}\r \rpage 1\r\r\rpage 2\r\r\rpage 3\r\r\rpage test\r\r\r{{% children description=\u0026quot;true\u0026quot; %}}\r "
},
{
	"uri": "http://echotrue.github.io/tags/concurrency-safety/",
	"title": "concurrency-safety",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/tags/context/",
	"title": "context",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/shortcodes/expand/",
	"title": "Expand",
	"tags": [],
	"description": "Displays an expandable/collapsible section of text on your page",
	"content": "The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example\n\r\rExpand me...\r\r\rLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\r Usage this shortcode takes exactly one optional parameter to define the text that appears next to the expand/collapse icon. (default is \u0026ldquo;Expand me\u0026hellip;\u0026quot;)\n{{%expand \u0026quot;Is this learn theme rocks ?\u0026quot; %}}Yes !.{{% /expand%}}\r \r\rIs this learn theme rocks ?\r\r\rYes !\r\r Demo {{%expand%}}\rLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\rtempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\rquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\rconsequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\rcillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\rproident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r{{% /expand%}}\r \r\rExpand me...\r\r\rLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\r "
},
{
	"uri": "http://echotrue.github.io/golang_post/channel/",
	"title": "Golang channel",
	"tags": ["Go"],
	"description": "",
	"content": "概念  从字面上看，channel的意思大概就是管道的意思。channel是一种goroutine用以接收或发送消息的安全的消息队列，channel就像两个goroutine之间的导管，来实现各种资源的同步。在官方Effective go文档中有一句非常著名的话可以说明channel在使用Golang进行并发编程的时候扮演了极为重要的角色\n Do not communicate by sharing memory; instead, share memory by communicating.\n Channel类型 readOnlyCh := make(\u0026lt;-chan int)//表示一个元素类型为T的单向接收通道类型。 编译器不允许向此类型的值中发送数据。\rwriteOnlyCh := make(chan\u0026lt;- int)//表示一个元素类型为T的单向发送通道类型。 编译器不允许从此类型的值中接收数据\rreadWriteCh := make(chan int)//表示一个元素类型为T的双向通道类型。 编译器允许从此类型的值中接收和向此类型的值中发送数据\r阻塞  根据Channel缓冲区的大小，我们又可以将Channel分为Unbuffered channels与Buffered channels。其中，Unbuffered channels的缓冲区大小为0，这种channel的接收者会阻塞直至接收到消息，发送者会阻塞直至接收者接收到消息，这种机制可以用于两个goroutine进行状态同步。Buffered channels拥有缓冲区，当缓冲区已满时，发送者会阻塞；当缓冲区为空时，接收者会阻塞。引用The Nature Of Channels In Go中的两张图片来说明两种channel的特性。\n Unbuffered Channels   Buffered Channels  基本用法 ch := make(chan string)\rgo func() {\rch \u0026lt;- \u0026quot;hello\u0026quot;\r}()\rmsg := \u0026lt;-ch\rfmt.Println(msg)\r 以上代码，利用不带缓冲的channel双向阻塞的特性。主goroutine(就是main函数)会阻塞直到接收到子goroutine向ch中写入的值。所以保证了hello一定会输出。\n利用Channel实现并发的同步  基本用法中的代码片段使用阻塞接收的方式，实现了主goroutine等待子goroutine完成。最终达到了两个goroutine的同步。使用WaitGroup同样能达到多个goroutine的同步，尤其是需要等待多个协程的情况下，WaitGroup会是更好的选择。\nfunc worker(i int, wg *sync.WaitGroup) {\rdefer wg.Done()\rtime.Sleep(time.Second)\rfmt.Printf(\u0026quot;worker %d stared\\n\u0026quot;, i)\r}\rfunc main() {\rvar wg sync.WaitGroup\rfor i := 1; i \u0026lt;= 5; i++ {\rwg.Add(1)\rgo worker(i, \u0026amp;wg)\r}\rwg.Wait()\r}\r执行结果：\nworker 1 stared\rworker 5 stared\rworker 4 stared\rworker 3 stared\rworker 2 stared\rChannel 选择器  select语句主要用在从多个读或者写channel的操作中进行选择。select语句会一直阻塞直到，有至少一个读或者写channel操作就绪。如果同时有多个操作准备就绪，select语句会随机选择其中一个执行。select语法类似switch，每个case相当于一个通道操作。\nc1 := make(chan string)\rc2 := make(chan string)\rgo func() {\rtime.Sleep(1 * time.Second)\rc1 \u0026lt;- \u0026quot;one\u0026quot;\r}()\rgo func() {\rtime.Sleep(1 * time.Second)\rc2 \u0026lt;- \u0026quot;two\u0026quot;\r}()\rfor i := 0; i \u0026lt; 2; i++ {\rselect {\rcase msg1 := \u0026lt;-c1:\rfmt.Printf(\u0026quot;接到消息：%s\\n\u0026quot;, msg1)\rcase msg2 := \u0026lt;-c2:\rfmt.Printf(\u0026quot;接到消息：%s\\n\u0026quot;, msg2)\r}\r}\r以上代码会输出：接到消息one，接到消息two。\nChannel遍历 for...range可以用来遍历通道，它会反复从通道接收数据直到通道关闭。\nqueue := make(chan string, 2)\rqueue \u0026lt;- \u0026quot;one\u0026quot;\rqueue \u0026lt;- \u0026quot;two\u0026quot;\rclose(queue)\rfor elem := range queue {\rfmt.Println(elem)\r}\rChannel 的关闭  内置函数close()可以用来关闭channel`,close()`函数只能关闭可读写或者只写的通道。通道的关闭通常应该遵循一定的原则：由生产者（发送者）来关闭，保证不关闭已关闭的通道(或向已关闭的通道发送值)。\nch := make(chan string) //可以关闭的通道\rch := make(chan\u0026lt;- string) //可以关闭的通道\rch := make(\u0026lt;-chan string) //不能关闭的通道\r1、关闭 一个通道意味着不能再向这个通道发送值了。 该特性可以向通道的接收方传达工作已经完成的信息。\nmsg := make(chan string)\rdone := make(chan bool)\rgo func() {\rfor {\rselect {\rcase m, ok := \u0026lt;-msg:\rif ok {\rfmt.Printf(m)\r} else {\rfmt.Println(\u0026quot;All message has received.\u0026quot;)\rdone \u0026lt;- true\rreturn\r}\r}\r}\r}()\rfor i := 1; i \u0026lt; 4; i++ {\rmsg \u0026lt;- fmt.Sprintf(\u0026quot;Message %d\\n\u0026quot;, i)\r}\rclose(msg)\r\u0026lt;-done\r2、向一个已经关闭的channel发送数据会panic\n3、从一个已经关闭的通道中读数据，依然可以读到数据。读到的内容是通道元素类型所对应的的零值。（例如：int类型channel读到的是0）。\nch := make(chan int)\rdataCh := make(chan string)\rgo func() {\rdataCh \u0026lt;- \u0026quot;str one\u0026quot;\rdataCh \u0026lt;- \u0026quot;str two\u0026quot;\rclose(dataCh)\r}()\rgo func() {\rfor {\rtime.Sleep(time.Millisecond * 500)\rselect {\rcase str := \u0026lt;-dataCh:\rfmt.Println(\u0026quot;--\u0026gt;\u0026quot;,str)\r}\r}\r}()\r\u0026lt;-ch\r//输出：\r--\u0026gt; str one\r--\u0026gt; str two\r--\u0026gt; --\u0026gt; 4、当发送者关闭通道后，通道接收器可以通过向接收表达式分配第二个参数来判断通道是否关闭。c,ok := \u0026lt;-ch，如果没有更多的值要接受且通道已经关闭，ok为false\nch := make(chan int)\rdataCh := make(chan string)\rgo func() {\rdataCh \u0026lt;- \u0026quot;str one\u0026quot;\rdataCh \u0026lt;- \u0026quot;str two\u0026quot;\rclose(dataCh)\r}()\rgo func() {\rfor {\rtime.Sleep(time.Millisecond * 500)\rselect {\rcase str, ok := \u0026lt;-dataCh:\rif ok {\rfmt.Println(\u0026quot;--\u0026gt;\u0026quot;, str)\r} else {\rfmt.Println(\u0026quot;通道已关闭\u0026quot;)\rch \u0026lt;- 1\rreturn\r}\r}\r}\r}()\r\u0026lt;-ch\rchannel的基本操作和注意事项 channel存在3种状态：\n nil，未初始化的状态，只进行了声明，或者手动赋值为nil active，正常的channel，可读或者可写 closed，已关闭，千万不要误认为关闭channel后，channel的值是nil  channel可进行3种操作：\n 读 写 关闭  把这3种操作和3种channel状态可以组合出9种情况：\n   操作 nil的channel 正常channel 已关闭channel     \u0026lt;- ch 阻塞 成功或阻塞 读到零值   ch \u0026lt;- 阻塞 成功或阻塞 panic   close(ch) panic 成功 panic    "
},
{
	"uri": "http://echotrue.github.io/golang_post/data-races/",
	"title": "Golang Data Races",
	"tags": ["Go", "并发", "数据竞争", "并发安全", "not concurrency-safety", "concurrency-safety"],
	"description": "",
	"content": "关于Golang并发安全  谈谈go语言编程的并发安全 Benign Data Races: What Could Possibly Go Wrong?  什么是数据竞争 package main import ( \u0026quot;fmt\u0026quot; ) func main() { var i int go func() { i = 5 }() fmt.Println(i) } 先通过以上程序来了解什么是数据竞争。首先声明一个变量i，默认值为0。然后开启一个单独的goroutine来设置i的值。 同时，在不知道开启的goroutine是否已经执行完成的情况下打印i的值。所以，当前正在发生两个操作：\n 变量i的值正在被设置为5 打印i的值  所以，最后程序打印出来的值可能是0或者5。这就叫数据竞争，i的值根据以上两个操作哪一个先完成而不同。\n检测数据竞争 Golang有一个内置的数据竞争检测器，只需要在使用Go命令行工具的时候添加-race标志。例如：让我们尝试用-race标志来 运行我们刚刚编写的程序：\n$ go run -race main.go 0 ================== WARNING: DATA RACE Write at 0x00c000122068 by goroutine 7: main.main.func1() F:/go_project/api-service/test/core/main.go:10 +0x3f Previous read at 0x00c000122068 by main goroutine: main.main() F:/go_project/api-service/test/core/main.go:12 +0x8f Goroutine 7 (running) created at: main.main() F:/go_project/api-service/test/core/main.go:9 +0x81 ================== Found 1 data race(s) exit status 66 0是打印结果，第一部分告诉我们在子goroutine中尝试写入的位置，第二部分告诉我们在主goroutine中，同时有一个读的操作。 第三部分描述了导致数据竞争的goroutine是在哪里创建。 除了go run名另外，go build和go test命令也支持使用-race标志。这个会使编译器创建的应用程序能够记录所有运行期 间对共享变量访问，并且会记录下每一个读或者写共享变量的goroutine的身份信息。\n竞争检查器会报告所有的已经发生的数据竞争。然而，它只能检测到运行时的竞争条件，并不能证明之后不会发生数据竞争。由于需要额外 的记录，因此构建时加了竞争检测的程序跑起来会慢一些，且需要更大的内存，即使是这样，这些代价对于很多生产环境的工作来说还是可 以接受的。对于一些偶发的竞争条件来说，使用附带竞争检查器的应用程序可以节省很多花在Debug上的时间。\n数据竞争解决方案 Go提供了很多解决它的选择。所有这些解决方案的思路都是确保在我们写入变量时阻止对该变量的访问。一般常用的解决数据竞争的方案有： 使用WaitGroup锁，使用通道阻塞以及使用Mutex锁，下面我们一个个来看他们的用法并比较一下这几种方案的不同点。\n使用WaitGroup func main() { var i int var wg sync.WaitGroup wg.Add(1) // 通知程序有一个需要等待完成的任务 go func() { i = 5 wg.Done() // 告诉程序任务已经执行完成 }() wg.Wait() // 阻塞当前程序直到等待的任务执行完成 fmt.Println(i) } 使用通道 func main() { var i int wait := make(chan struct{}) go func() { i = 5 wait \u0026lt;- struct{}{} }() \u0026lt;-wait fmt.Println(i) } 使用Mutex 以上两种解决方案都是在确定的读取和写入顺序的情况下来保证数据的一致性。当程序读取和写入的先后顺序不固定的时候，以上方案便不能满足我们。 这种情况下我们应该考虑使用Mutex互斥锁。使用互斥锁，可以保证读取和写入操作不能同时发生。\ntype SafeNumber struct { i int m sync.Mutex } func (sn *SafeNumber) Set(n int) { sn.m.Lock() defer sn.m.Unlock() sn.i = n } func (sn *SafeNumber) Get() int { sn.m.Lock() defer sn.m.Unlock() return sn.i } func main() { sn := new(SafeNumber) go func() { sn.Set(5) }() fmt.Println(sn.Get()) } "
},
{
	"uri": "http://echotrue.github.io/algorithm/golang-search-slice/",
	"title": "Golang Search Slice",
	"tags": ["Go", "Slice"],
	"description": "",
	"content": "题目  假设有一个超长的切片，切片的元素类型为int，切片中的元素为乱序排列。限时5秒，使用多个goroutine查找切片中是否存在给定值， 在找到目标值或者超时后立刻结束所有goroutine的执行。比如切片为：[23, 32, 78, 43, 76, 65, 345, 762, …… 915, 86]， 查找的目标值为345，如果切片中存在目标值程序输出:\u0026ldquo;Found it!\u0026ldquo;并且立即取消仍在执行查找任务的goroutine。如果在超时时间未 找到目标值程序输出:\u0026ldquo;Timeout! Not Found\u0026rdquo;，同时立即取消仍在执行查找任务的goroutine。\n 首先题目里提到了在找到目标值或者超时后立刻结束所有goroutine的执行，完成这两个功能需要借助计时器、通道和context才行。 我能想到的第一点就是要用context.WithCancel创建一个上下文对象传递给每个执行任务的goroutine，外部在满足条件后（找到目标值或者已超时） 通过调用上下文的取消函数来通知所有goroutine停止工作。\n解法 package main import ( \u0026quot;context\u0026quot; \u0026quot;fmt\u0026quot; \u0026quot;os\u0026quot; \u0026quot;time\u0026quot; ) func main() { timer := time.NewTimer(time.Second * 5) data := []int{1, 2, 3, 10, 999, 8, 345, 7, 98, 33, 66, 77, 88, 68, 96} dataLen := len(data) size := 3 target := 345 ctx, cancel := context.WithCancel(context.Background()) resultChan := make(chan bool) for i := 0; i \u0026lt; dataLen; i += size { end := i + size if end \u0026gt;= dataLen { end = dataLen - 1 } go SearchTarget(ctx, data[i:end], target, resultChan) } select { case \u0026lt;-timer.C: fmt.Fprintln(os.Stderr, \u0026quot;Timeout! Not Found\u0026quot;) cancel() case \u0026lt;-resultChan: fmt.Fprintf(os.Stdout, \u0026quot;Found it!\\n\u0026quot;) cancel() } time.Sleep(time.Second * 2) } func SearchTarget(ctx context.Context, data []int, target int, resultChan chan bool) { for _, v := range data { select { case \u0026lt;-ctx.Done(): fmt.Fprintf(os.Stdout, \u0026quot;Task cancelded! \\n\u0026quot;) return default: } // 模拟一个耗时查找，这里只是比对值，真实开发中可以是其他操作 fmt.Fprintf(os.Stdout, \u0026quot;v: %d \\n\u0026quot;, v) time.Sleep(time.Millisecond * 1500) if target == v { resultChan \u0026lt;- true return } } } "
},
{
	"uri": "http://echotrue.github.io/shortcodes/mermaid/",
	"title": "Mermaid",
	"tags": [],
	"description": "Generation of diagram and flowchart from text in a similar manner as markdown",
	"content": "Mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown.\nJust insert your mermaid code in the mermaid shortcode and that's it.\nFlowchart example {{\u0026lt;mermaid align=\u0026quot;left\u0026quot;\u0026gt;}}\rgraph LR;\rA[Hard edge] --\u0026gt;|Link text| B(Round edge)\rB --\u0026gt; C{Decision}\rC --\u0026gt;|One| D[Result one]\rC --\u0026gt;|Two| E[Result two]\r{{\u0026lt; /mermaid \u0026gt;}}\r renders as\ngraph LR;\rA[Hard edge] --|Link text| B(Round edge)\rB -- C{Decision}\rC --|One| D[Result one]\rC --|Two| E[Result two]\r\ror you can use this alternative syntax:\nrenders as\ngraph LR;\rA[Hard edge] --\u0026gt;|Link text| B(Round edge)\rB --\u0026gt; C{Decision}\rC --\u0026gt;|One| D[Result one]\rC --\u0026gt;|Two| E[Result two]\rSequence example {{\u0026lt;mermaid\u0026gt;}}\rsequenceDiagram\rparticipant Alice\rparticipant Bob\rAlice-\u0026gt;\u0026gt;John: Hello John, how are you?\rloop Healthcheck\rJohn-\u0026gt;John: Fight against hypochondria\rend\rNote right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail...\rJohn--\u0026gt;Alice: Great!\rJohn-\u0026gt;Bob: How about you?\rBob--\u0026gt;John: Jolly good!\r{{\u0026lt; /mermaid \u0026gt;}}\r renders as\nsequenceDiagram\rparticipant Alice\rparticipant Bob\rAlice-John: Hello John, how are you?\rloop Healthcheck\rJohn-John: Fight against hypochondria\rend\rNote right of John: Rational thoughts prevail...\rJohn--Alice: Great!\rJohn-Bob: How about you?\rBob--John: Jolly good!\r\ror you can use this alternative syntax:\nrenders as\nsequenceDiagram\rparticipant Alice\rparticipant Bob\rAlice-\u0026gt;\u0026gt;John: Hello John, how are you?\rloop Healthcheck\rJohn-\u0026gt;John: Fight against hypochondria\rend\rNote right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail...\rJohn--\u0026gt;Alice: Great!\rJohn-\u0026gt;Bob: How about you?\rBob--\u0026gt;John: Jolly good!\rGANTT Example {{\u0026lt;mermaid\u0026gt;}}\rgantt\rdateFormat YYYY-MM-DD\rtitle Adding GANTT diagram functionality to mermaid\rsection A section\rCompleted task :done, des1, 2014-01-06,2014-01-08\rActive task :active, des2, 2014-01-09, 3d\rFuture task : des3, after des2, 5d\rFuture task2 : des4, after des3, 5d\rsection Critical tasks\rCompleted task in the critical line :crit, done, 2014-01-06,24h\rImplement parser and jison :crit, done, after des1, 2d\rCreate tests for parser :crit, active, 3d\rFuture task in critical line :crit, 5d\rCreate tests for renderer :2d\rAdd to mermaid :1d\r{{\u0026lt; /mermaid \u0026gt;}}\r renders as\ngantt\rdateFormat YYYY-MM-DD\rtitle Adding GANTT diagram functionality to mermaid\rsection A section\rCompleted task :done, des1, 2014-01-06,2014-01-08\rActive task :active, des2, 2014-01-09, 3d\rFuture task : des3, after des2, 5d\rFuture task2 : des4, after des3, 5d\rsection Critical tasks\rCompleted task in the critical line :crit, done, 2014-01-06,24h\rImplement parser and jison :crit, done, after des1, 2d\rCreate tests for parser :crit, active, 3d\rFuture task in critical line :crit, 5d\rCreate tests for renderer :2d\rAdd to mermaid :1d\r\ror you can use this alternative syntax:\nrenders as\ngantt\rdateFormat YYYY-MM-DD\rtitle Adding GANTT diagram functionality to mermaid\rsection A section\rCompleted task :done, des1, 2014-01-06,2014-01-08\rActive task :active, des2, 2014-01-09, 3d\rFuture task : des3, after des2, 5d\rFuture task2 : des4, after des3, 5d\rsection Critical tasks\rCompleted task in the critical line :crit, done, 2014-01-06,24h\rImplement parser and jison :crit, done, after des1, 2d\rCreate tests for parser :crit, active, 3d\rFuture task in critical line :crit, 5d\rCreate tests for renderer :2d\rAdd to mermaid :1d\rClass example renders as\nclassDiagram\rClass01 \u0026lt;|-- AveryLongClass : Cool\rClass03 *-- Class04\rClass05 o-- Class06\rClass07 .. Class08\rClass09 --\u0026gt; C2 : Where am i?\rClass09 --* C3\rClass09 --|\u0026gt; Class07\rClass07 : equals()\rClass07 : Object[] elementData\rClass01 : size()\rClass01 : int chimp\rClass01 : int gorilla\rClass08 \u0026lt;--\u0026gt; C2: Cool label\rGit example renders as\ngitGraph:\roptions\r{\r\u0026quot;nodeSpacing\u0026quot;: 150,\r\u0026quot;nodeRadius\u0026quot;: 10\r}\rend\rcommit\rbranch newbranch\rcheckout newbranch\rcommit\rcommit\rcheckout master\rcommit\rcommit\rmerge newbranch\r"
},
{
	"uri": "http://echotrue.github.io/tags/not-concurrency-safety/",
	"title": "not concurrency-safety",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/shortcodes/notice/",
	"title": "Notice",
	"tags": [],
	"description": "Disclaimers to help you structure your page",
	"content": "The notice shortcode shows 4 types of disclaimers to help you structure your page.\nNote {{% notice note %}}\rA notice disclaimer\r{{% /notice %}}\rrenders as\nA notice disclaimer\n\rInfo {{% notice info %}}\rAn information disclaimer\r{{% /notice %}}\rrenders as\nAn information disclaimer\n\rTip {{% notice tip %}}\rA tip disclaimer\r{{% /notice %}}\rrenders as\nA tip disclaimer\n\rWarning {{% notice warning %}}\rA warning disclaimer\r{{% /notice %}}\rrenders as\nA warning disclaimer\n\r"
},
{
	"uri": "http://echotrue.github.io/shortcodes/children/children-1/",
	"title": "page 1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "http://echotrue.github.io/shortcodes/children/children-1/children-1-1/",
	"title": "page 1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "http://echotrue.github.io/shortcodes/children/children-1/children-1-1/children-1-1-1/",
	"title": "page 1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "http://echotrue.github.io/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/",
	"title": "page 1-1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "http://echotrue.github.io/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/children-1-1-1-1-1/",
	"title": "page 1-1-1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "http://echotrue.github.io/shortcodes/children/children-2/",
	"title": "page 2",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"
},
{
	"uri": "http://echotrue.github.io/shortcodes/children/children-3/",
	"title": "page 3",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page, not displayed in the menu\n"
},
{
	"uri": "http://echotrue.github.io/shortcodes/children/children-4/",
	"title": "page 4",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page, not displayed in the menu\n"
},
{
	"uri": "http://echotrue.github.io/shortcodes/children/test/",
	"title": "page test",
	"tags": [],
	"description": "This is a page test",
	"content": "This is a test demo child page\n"
},
{
	"uri": "http://echotrue.github.io/shortcodes/children/children-2/test3/",
	"title": "page test 3",
	"tags": [],
	"description": "This is a page test",
	"content": "This is a test 3 demo child page\n"
},
{
	"uri": "http://echotrue.github.io/showcase/",
	"title": "Showcase",
	"tags": [],
	"description": "",
	"content": "TAT by OVH Tshark.dev by Ross Jacobs inteliver by Amir Lavasani "
},
{
	"uri": "http://echotrue.github.io/shortcodes/siteparam/",
	"title": "Site param",
	"tags": [],
	"description": "Get value of site params variables in your page.",
	"content": "siteparam shortcode is used to help you print values of site params.\nFor instance, in this current site, the editURL variable is used in config.toml\n[params]\reditURL = \u0026#34;https://github.com/matcornic/hugo-theme-learn/edit/master/exampleSite/content/\u0026#34;\rUse the siteparam shortcode to display its value.\n`editURL` Value : {{% siteparam \u0026quot;editURL\u0026quot; %}}\ris displayed as\neditURL Value :\n"
},
{
	"uri": "http://echotrue.github.io/tags/slice/",
	"title": "Slice",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/tags/%E4%B8%8A%E4%B8%8B%E6%96%87/",
	"title": "上下文",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/tags/%E5%88%87%E7%89%87/",
	"title": "切片",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/tags/%E5%B9%B6%E5%8F%91/",
	"title": "并发",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/tags/%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/",
	"title": "并发安全",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/tags/%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89/",
	"title": "数据竞争",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://echotrue.github.io/tags/%E6%95%B0%E7%BB%84/",
	"title": "数组",
	"tags": [],
	"description": "",
	"content": ""
}]